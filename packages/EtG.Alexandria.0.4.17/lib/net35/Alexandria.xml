<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alexandria</name>
    </assembly>
    <members>
        <member name="M:Alexandria.Assetbundle.BeamBuilders.GenerateAnchoredBeamPrefabBundle(Projectile,System.String,tk2dSpriteCollectionData,tk2dSpriteAnimation,System.String,UnityEngine.Vector2,UnityEngine.Vector2,System.String,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.String,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.String,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Boolean,System.Boolean,System.String,System.String,System.String,System.Single,System.Boolean,System.String,System.String,System.String,System.Single)">
            <summary>Version of GenerateBeamPrefabBundle to use if anchors have already been set up in the asset bundle</summary>
        </member>
        <member name="M:Alexandria.Assetbundle.GunInt.SetupSprite(Gun,tk2dSpriteCollectionData,System.String,System.Int32,System.String)">
            <summary>
            Virtually the same as GunExt, except allows for using pre-built sprite collections to use as Ammonomicon sprites.
            </summary>
            <param name="gun">The prefix of the mod that adds the stat.</param>
            <param name="collection">The sprite collection the ammonomicon sprite is from.</param>
            <param name="defaultSprite">The name of your sprite you want to use for your ammonomicon entry, thats in your collection.</param>
            <param name="fps">Frames Per Second.</param>
            <param name="ammonomiconSprite">Specific Ammonomicon Sprite.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Assetbundle.GunInt.SetupSpritePrebaked(Gun,tk2dSpriteCollectionData,System.String,System.String)">
            <summary>
            Virtually the same as GunExt, except allows for using pre-built sprite collections to use as Ammonomicon sprites. Use only if your animations are also pre-built.
            </summary>
            <param name="gun">The prefix of the mod that adds the stat.</param>
            <param name="collection">The sprite collection the ammonomicon sprite is from.</param>
            <param name="defaultSprite">The name of your sprite you want to use for your ammonomicon entry, thats in your collection.</param>
            <param name="ammonomiconSprite">Specific Ammonomicon Sprite.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Assetbundle.JsonEmbedder.EmbedJsonDataFromAssembly(System.Reflection.Assembly,tk2dSpriteCollectionData,System.String)">
            <summary>
            Processes every json in the selected folder and adds the appropriate hand json data to the sprites in your sprite collection.
            </summary>
            <param name="asmb">your Assembly. Get this via Assembly.GetExecutingAssembly(), I think.</param>
            <param name="data">The sprite collection of your guns.</param>
            <param name="path">The direct filepath to all of your *embedded gun jsons.*.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateTeleporterController(System.String,System.String[],System.String[],System.String[],System.String,System.Int32,System.Int32,UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.GameObject,tk2dSpriteAnimator)">
            <summary>
            Generates, and returns a TeleporterController. This is for generating a Teleporter that you can teleport to from the map. Of note, any of the gameObject stuff at the end of the method is nullable and should use the default teleporter VFX stuff if left as null
            </summary>
            <param name="name">The name of your Teleporter object. Keep it simple, no special characters.</param>
            <param name="idleSpritePaths">Your idle aniamtion sprite paths. Only insert one path if you don't want it to be animated.</param>
            <param name="activationSpritePaths">Your sprite paths for the aniamtion is plays when its activated.</param>
            <param name="activeIdleSpritePaths">Your sprite paths for the idle aniamtion it plays when its active.</param>
            <param name="MinimapIconPath">Your sprite path for the room icon.</param>
            <param name="idleAnimFPS">Your idle aniamtion FPS.</param>
            <param name="activateAnimFPS">Your active animtion FPS. Due to how Teleporters are coded, the "activate" and "active idle" animation are one aniamtion with the "active idle" just being looped. (CITATION NEEDED)</param>
            <param name="isActiveVFX">The VFX that plays on the Teleporter when you teleporter to one.</param>
            <param name="singleTimeActivateVFX">The VFX that plays on the Teleporter its initially activated.</param>
            <param name="teleproterArrivedVFX">The VFX that plays on the Teleporter when you teleport to it.</param>
            <param name="teleporterDepartVFX">The VFX that plays on the Teleporter when you teleport away from it.</param>
            <param name="portalVFX">The VFX that plays on the Teleporter idly after teleporting to / from it.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateShadow(System.String,System.String,UnityEngine.Transform,UnityEngine.Vector3,tk2dSpriteCollectionData)">
            <summary>
            Generates, and returns a shadow for your breakables. This is a very simple shadow object, so make the sprite completely black for best results!
            </summary>
            <param name="ShadowSpritePath">The sprite path to yoru shadow sprite.</param>
            <param name="name">The object name.</param>
            <param name="parent">The parent objects Transform that your shadow will be parented to.</param>
            <param name="Offset">The offset of the shadow object.</param>
            <param name="customCollection">Leave this as null. Currently for an unfinished idea.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateDungeonDoorSubsidiaryBlocker(System.String,System.String[],System.String[],System.String[],System.Boolean,System.String[],System.Int32,System.Int32,System.Int32,System.Int32,System.String[],System.String[],System.String[],System.String[])">
            <summary>
            Unfinished, do not use!
            </summary>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateDungeonDoorController(System.String,DungeonDoorController.DoorModule[],DungeonDoorController.DungeonDoorMode,System.Boolean,System.Boolean,System.Boolean,DungeonDoorSubsidiaryBlocker,System.Boolean)">
            <summary>
            Unfinished, do not use!
            </summary>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateDoorModule(System.String,System.String[],System.String[],System.String[],System.Int32)">
            <summary>
            Unfinished, do not use!
            </summary>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.AddAnimation(System.String,tk2dSpriteAnimator,tk2dSpriteAnimation,System.Int32,System.String[],tk2dSpriteCollectionData,tk2dSpriteAnimationClip.WrapMode)">
            <summary>
            Generates, and returns a tk2dSpriteAnimationClip. Can be used to add new Tk2daAnimations to an object, as long as it has a tk2dSpriteAnimator.
            </summary>
            <param name="clipName">The name of your animation clip.</param>
            <param name="animator">Your objects tk2dSpriteAnimator.</param>
            <param name="animation">Your objects tk2dSpriteAnimation component.</param>
            <param name="FPS">Your animations FPS.</param>
            <param name="SpritePaths">All the spritepaths to your animation.</param>
            <param name="SpriteObjectSpriteCollection">Your objects SpriteObjectSpriteCollection. Can be gotten by getting the tk2dsprite of the object and accessing the Collection variable. Ex: aiActor.sprite.Collection.</param>
            <param name="wrapMode">Your animations wrap mode.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateDecalObject(System.String,System.String[],System.Int32)">
            <summary>
            Generates, and returns a simple GameObject with a sprite / animation.
            </summary>
            <param name="name">Your objects name.</param>
            <param name="SpritePaths">Your spritepath(s) to your decal.</param>
            <param name="AnimFPS">The FPS of the animation, if it will have one.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateKickableObject(System.String,System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Single,System.Collections.Generic.List{CollisionLayer})">
            <summary>
            Generates, and returns a KickableObject. This is for generating a basic one, it returns it so you can additionally modify it without cluttering up the setup method too much. Reminder, KickableObjects have a MinorBreakable component that you could modify as well!
            </summary>
            <param name="name">The name of your kickable. Keep it simple, its used in generating your animations, so no special characters.</param>
            <param name="idleSpritePaths">Your sprite paths. Only insert one path if you don't want it to be animated.</param>
            <param name="rollNorthPaths">The sprite paths for the animation for when it rolls NORTH.</param>
            <param name="rollSouthPaths">The sprite paths for the animation for when it rolls SOUTH.</param>
            <param name="rollEastPaths">The sprite paths for the animation for when it rolls EAST.</param>
            <param name="rollWestPaths">The sprite paths for the animation for when it rolls WEST.</param>
            <param name="impactNorthPaths">The sprite paths for the animation for when it is broken during a rolling animation state. This one is for when its facing NORTH.</param>
            <param name="impactSouthPaths">The sprite paths for the animation for when it is broken during a rolling animation state. This one is for when its facing SOUTH.</param>
            <param name="impactEastPaths">The sprite paths for the animation for when it is broken during a rolling animation state. This one is for when its facing EAST.</param>
            <param name="impactWestPaths">The sprite paths for the animation for when it is broken during a rolling animation state. This one is for when its facing WEST.</param>
            <param name="impactNotRollingPaths">The sprite paths for the animation for when it is broken before it has been kicked.</param>
            <param name="RolledIntoBreakPaths">The sprite paths for the animation for when it is broken WHEN the player DODGEROLLS into the kickable.</param>
            <param name="idleAnimFPS">The FPS of your idle animation.</param>
            <param name="rollAnimFPS">The FPS of your all your rolling animations. No, I will not add support for each direction having its own FPS, fuck off and fuck you.</param>
            <param name="breakAnimFPS">The FPS of your all your breaking animations. No, I will not add support for each direction having its own FPS, again, fuck off and fuck you.</param>
            <param name="breakNotRollingFPS">The FPS of your broken-before-kicked animation.</param>
            <param name="breakRolledIntoFPS">The FPS of your broken-when-dodgerolled-into animation.</param>
            <param name="UsesCustomColliderValues">Setting this to true will let you use custom collider sizes and offsets. Keeping it false will use no offsets and generate a size based on the sprites size.</param>
            <param name="ColliderSizeX">The X Value of your collider. Only used if UsesCustomColliderValues is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderSizeY">The Y Value of your collider. Only used if UsesCustomColliderValues is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderOffsetX">The X Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="ColliderOffsetY">The Y Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="HasAdditionalCollisions">If true, adds a BulletBlocker, EnemyBlocker and PlayerBlocker CollisionLayer to your kickable .</param>
            <param name="AdditionalCollisionsUseColliderSizes">If true, uses the collider sizes and offsets that you give later, else it will use the same sizes as given previously.</param>
            <param name="AdiitionalColliderSizeX">The X Value of your additional colliders. Only used if AdditionalCollisionsUseColliderSizes is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="AdiitionalColliderSizeY">The Y Value of your additional colliders. Only used if AdditionalCollisionsUseColliderSizes is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="AdiitionalColliderOffsetX">The X offset of your additional colliders. Only used if AdditionalCollisionsUseColliderSizes is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="AdiitionalColliderOffsetY">The Y offset of your additional colliders. Only used if AdditionalCollisionsUseColliderSizes is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="breakAudioEvent">The name of the sound that plays when your kickable is broken.</param>
            <param name="rollingSpeed">The speed at which your kickable moves.</param>
            <param name="collisionLayerList">Sets the collision layer/s of the MajorBreakable. leaving this as null will set it to HighObstacle AND BulletBlocker, however basegame MajorBreakables can use different ones, and at times multiple at once.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateTable(System.String,System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlippableCover.FlipStyle,System.Single,System.String,System.Collections.Generic.Dictionary{System.Single,System.String},System.Collections.Generic.Dictionary{System.Single,System.String},System.Collections.Generic.Dictionary{System.Single,System.String},System.Collections.Generic.Dictionary{System.Single,System.String},System.Collections.Generic.Dictionary{System.Single,System.String},System.Boolean,System.Boolean,System.Single)">
            <summary>
            (Unstable, no guaranteed good results!) Generates, and returns a FlippableCover. This is for generating a basic one, it returns it so you can additionally modify it without cluttering up the setup method too much. Reminder, FlippableCovers have a MajorBreakable component that you could modify as well!
            </summary>
            <param name="name">The name of your kickable. Keep it simple, its used in generating your animations, so no special characters.</param>
            <param name="idleSpritePaths">Your sprite paths. Only insert one path if you don't want it to be animated.</param>
            <param name="outlinePaths">Your sprite paths for the *outlines* that appear when you are nearby a table. Of note, your array of path should be in a SPECIFIC order, with North being 1st, East being 2nd, West being 3rd and South being forth.</param>
            <param name="northFlipPaths">Your sprite paths for the flip animations facing NORTH.</param>
            <param name="southFlipPaths">Your sprite paths for the flip animations facing SOUTH.</param>
            <param name="eastFlipPaths">Your sprite paths for the flip animations facing EAST.</param>
            <param name="westFlipPaths">Your sprite paths for the flip animations facing WEST.</param>
            <param name="northBreakPaths">Your sprite paths for the flipped break animations facing NORTH.</param>
            <param name="southBreakPaths">Your sprite paths for the flipped break animations facing SOUTH.</param>
            <param name="eastBreakPaths">Your sprite paths for the flipped break animations facing EAST.</param>
            <param name="westBreakPaths">Your sprite paths for the flipped break animations facing WEST.</param>
            <param name="unflippedBreakPaths">Your sprite paths for the break animations when the table has NOT been flipped yet.</param>
            <param name="IdleFPS">The FPS of your idle animation.</param>
            <param name="FlipFPS">The FPS of all your flip animations.</param>
            <param name="BreakFPS">The FPS of all your break-while-flipped animations.</param>
            <param name="UnflippedBreakFPS">The FPS of your break-while-unflipped animation.</param>
            <param name="UsesCustomColliderValues">Setting this to true will let you use custom collider sizes and offsets. Keeping it false will use no offsets and generate a size based on the sprites size.</param>
            <param name="ColliderSizeX">The X Value of your collider. Only used if UsesCustomColliderValues is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderSizeY">The Y Value of your collider. Only used if UsesCustomColliderValues is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderOffsetX">The X Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="ColliderOffsetY">The Y Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="FlippedColliderSizeX_Horizontal">The X Value of your collider for when the table is flipped NORTH or SOUTH. My code *should* automatically place the hit box appropriate to the edge of the table. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="FlippedColliderSizeY_Horizontal">The Y Value of your collider for when the table is flipped NORTH or SOUTH. My code *should* automatically place the hit box appropriate to the edge of the table. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="FlippedColliderSizeX_Vertical">The X Value of your collider for when the table is flipped EAST or WEST. My code *should* automatically place the hit box appropriate to the edge of the table. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="FlippedColliderSizeY_Vertical">The Y Value of your collider for when the table is flipped EAST or WEST. My code *should* automatically place the hit box appropriate to the edge of the table. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="flipStyle">The directions in which your table is able to be flipped.</param>
            <param name="TableHP">The amount of HP your table has. Breaks when its HP reaches 0.</param>
            <param name="ShadowSpritePath">currently does nothing. leave it as null.</param>
            <param name="unflippedBreakAnimPercentagesAndSpritePaths">Switches the tables idle sprite to one given when its at a certain percentage of HP. The percentage should be a value like 50 if you want it to switch at 50 percent HP. The string you have to give is a SPRITE PATH to the sprite you want it to switch to.</param>       
            <param name="breakAnimPercentages_AND_SpritePathsandBreakDirectionsNorth">(NOTE: SPRITE NAME MUST INCLUDE LOWERCASE NORTH) Switches the tables flipped sprite to one given when its at a certain percentage of HP. The percentage should be a value like 50 if you want it to switch at 50% HP. The string you have to give is a SPRITE PATH to the sprite you want it to switch to, and the ENUM you set to a direction is to set what DIRECTION that sprite is for.</param>
            <param name="breakAnimPercentages_AND_SpritePathsandBreakDirectionsSouth">(NOTE: SPRITE NAME MUST INCLUDE LOWERCASE SOUTH) Switches the tables flipped sprite to one given when its at a certain percentage of HP. The percentage should be a value like 50 if you want it to switch at 50% HP. The string you have to give is a SPRITE PATH to the sprite you want it to switch to, and the ENUM you set to a direction is to set what DIRECTION that sprite is for.</param>
            <param name="breakAnimPercentages_AND_SpritePathsandBreakDirectionsEast">(NOTE: SPRITE NAME MUST INCLUDE LOWERCASE EAST) Switches the tables flipped sprite to one given when its at a certain percentage of HP. The percentage should be a value like 50 if you want it to switch at 50% HP. The string you have to give is a SPRITE PATH to the sprite you want it to switch to, and the ENUM you set to a direction is to set what DIRECTION that sprite is for.</param>
            <param name="breakAnimPercentages_AND_SpritePathsandBreakDirectionsWest">(NOTE: SPRITE NAME MUST INCLUDE LOWERCASE WEST) Switches the tables flipped sprite to one given when its at a certain percentage of HP. The percentage should be a value like 50 if you want it to switch at 50% HP. The string you have to give is a SPRITE PATH to the sprite you want it to switch to, and the ENUM you set to a direction is to set what DIRECTION that sprite is for.</param>
            <param name="hasDecorations">Will it add a SurfaceDecorator component to your table.</param>
            <param name="chanceToDecorateTable">The % chance your table will have decoration.</param>
            <param name="IsSlideable">Can your table be slid on.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateNoteDoer(MajorBreakable,UnityEngine.Transform,System.String,System.Boolean,NoteDoer.NoteBackgroundType)">
            <summary>
            Generates, and returns a NoteDoer using a MajorBreakable. This is as much customization as you'll probably get for now.
            </summary>
            <param name="majorBreakable">Your MajorBreakable that you're turning into a Note.</param>
            <param name="textboxSpawnPoint">The transform position from where the textbox will spawn.</param>
            <param name="stringKey">What your note says.</param>
            <param name="DestroyedAfterRead">If true, destroys the note after being read.</param>
            <param name="noteBackgroundType">The background your note will have.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateTransformObject(UnityEngine.GameObject,UnityEngine.Vector2,System.String)">
            <summary>
            Generates, and returns a GameObject that can be used as a transform position.
            </summary>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateMajorBreakable(System.String,System.String[],System.Int32,System.String[],System.Int32,System.Single,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,VFXPool,VFXPool,System.Boolean,System.Collections.Generic.List{CollisionLayer},System.Collections.Generic.Dictionary{System.Single,System.String})">
            <summary>
            Generates, and returns a MajorBreakable. This is for generating a basic one, it returns it so you can additionally modify it without cluttering up the setup method too much.
            </summary>
            <param name="name">The name of your breakable. Not very useful, but I figured it would be important to set it.</param>
            <param name="idleSpritePaths">Your sprite paths. Only insert one path if you don't want it to be animated.</param>
            <param name="idleAnimFPS">The FPS of your breakables idle animation.</param>
            <param name="breakSpritePaths">Your sprite paths for the break animation. You can set this to null if you dont want a break animation.</param>
            <param name="breakAnimFPS">The FPS of your breakables breaking animation.</param>
            <param name="HP">The amount of damage your MajorBreakable can sustain before breaking.</param>
            <param name="UsesCustomColliderValues">Setting this to true will let you use custom collider sizes and offsets. Keeping it false will use no offsets and generate a size based on the sprites size.</param>
            <param name="ColliderSizeX">The X Value of your collider. Only used if UsesCustomColliderValues is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderSizeY">The Y Value of your collider. Only used if UsesCustomColliderValues is true. Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderOffsetX">The X Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="ColliderOffsetY">The Y Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="DistribleShards">When shards spawn, if set to true, will spawn the shards at random positions inside the bounds of your breakables sprite.</param>
            <param name="breakVFX">The VFX that plays when the breakable is broken. Keep this as null to not have any VFX there.</param>
            <param name="damagedVFX">The VFX that plays when the breakable is damaged. Keep this as null to not have any VFX there.</param>
            <param name="BlocksPaths">Will act as a blocker and will not let enemies path find through it, I think.</param>
            <param name="collisionLayerList">Sets the collision layer/s of the MajorBreakable. leaving this as null will set it to HighObstacle AND BulletBlocker, however basegame MajorBreakables can use different ones, and at times multiple at once.</param>
            <param name="preBreakframesAndHPPercentages">A dictionary of sprite paths and the percentage of HP at which your breakable will switch to using it.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateMinorBreakable(System.String,System.String[],System.Int32,System.String[],System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.GameObject,System.Collections.Generic.List{CollisionLayer})">
            <summary>
            Generates, and returns a MinorBreakable. This is for generating a basic one, it returns it so you can additionally modify it without cluttering up the setup method too much.
            </summary>
            <param name="name">The name of your breakable. Not very useful, but I figured it would be important to set it.</param>
            <param name="idleSpritePaths">Your sprite paths. Only insert one path if you don't want it to be animated.</param>
            <param name="idleAnimFPS">The FPS of your breakables idle animation.</param>
            <param name="breakSpritePaths">Your sprite paths for the break animation. You can set this to null if you dont want a break animation.</param>
            <param name="breakAnimFPS">The FPS of your breakables breaking animation.</param>
            <param name="breakAudioEvent">The sound that plays when your breakable is broken. You can set it to null for it to not play a sound.</param>
            <param name="UsesCustomColliderValues">Setting this to true will let you use custom collider sizes and offsets. Keeping it false will use no offsets and generate a size based on the sprites size.</param>
            <param name="ColliderSizeX">The X Value of your collider. Only used if UsesCustomColliderValues is true.  Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderSizeY">The Y Value of your collider. Only used if UsesCustomColliderValues is true.  Note that 1 here means 1 *pixel*, and not 1 tile!</param>
            <param name="ColliderOffsetX">The X Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="ColliderOffsetY">The Y Value of your colliders offset. Only used if UsesCustomColliderValues is true.</param>
            <param name="DestroyVFX">The VFX that plays when your breakable is destroyed.</param>
            <param name="collisionLayerList">Sets the collision layer/s of the MinorBreakable. leaving this as null will set it to HighObstacle, however basegame MinorBreakables can use different ones, and at times multiple at once.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateWaftingDebrisObject(System.String,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean,System.Single,System.Single,System.Single,System.Single,tk2dSprite,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns a WaftingDebrisObject that you can add to a ShardCluster, which in turn can be used by your breakable  
            </summary>
            <param name="waftDuration">Takes a random value between the X and Y value given and uses that as a value for how long it wafts *every* waft.</param>
            <param name="waftDistance">Takes a random value between the X and Y value given and uses that as a value for the distance it wafts.</param>
            <param name="initialBurstDuration">Takes the X and Y value given as a potential peak height.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards contact the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>
            <param name="shardSpritePath">The sprite path to your sprite.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateAnimatedWaftingDebrisObject(System.String[],UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,tk2dSpriteAnimationClip.WrapMode,System.Boolean,System.Single,System.Single,System.Single,System.Single,tk2dSprite,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns an animated WaftingDebrisObject that you can add to a ShardCluster, which in turn can be used by your breakable  
            </summary>
            <param name="waftDuration">Takes a random value between the X and Y value given and uses that as a value for how long it wafts *every* waft.</param>
            <param name="waftDistance">Takes a random value between the X and Y value given and uses that as a value for the distance it wafts.</param>
            <param name="initialBurstDuration">Takes the X and Y value given as a potential peak height.</param>
            <param name="FPS">The FPS of your DebrisObject.</param>
            <param name="wrapMode">The wrap mode of the animated DebrisObject.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards hit the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>
            <param name="shardSpritePaths">An array of sprite paths that leads to your animation sprites.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateWaftingDebrisObjects(System.String[],UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean,System.Single,System.Single,System.Single,System.Single,tk2dSprite,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns an array of WaftingDebrisObjects that you can add to a ShardCluster, which in turn can be used by your breakable. note that each Debris Object generated here will all use the same values you gave it
            </summary>
            <param name="waftDuration">Takes a random value between the X and Y value given and uses that as a value for how long it wafts *every* waft.</param>
            <param name="waftDistance">Takes a random value between the X and Y value given and uses that as a value for the distance it wafts.</param>
            <param name="initialBurstDuration">Takes the X and Y value given as a potential peak height.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards hit the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>
            <param name="shardSpritePaths">An array of sprite paths. EACH ENTRY WILL BE ITS OWN OBJECT!</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateAnimatedWaftingDebrisObjects(System.Collections.Generic.List{System.String[]},UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,tk2dSpriteAnimationClip.WrapMode,System.Boolean,tk2dSprite,System.Single,System.Single,System.Single,System.Single,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns an array of animated WaftingDebrisObjects that you can add to a ShardCluster, which in turn can be used by your breakable. note that each Debris Object generated here will all use the same values you gave it
            </summary>
            <param name="FPS">The FPS of your DebrisObject.</param>
            <param name="wrapMode">The wrap mode of the animated DebrisObject.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards hit the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>  
            <param name="shardSpritePathsList">A list of arrays for your shard sprite paths. Each individual array will be its own debris object!</param>
            <param name="waftDuration">A Vector2 for how long your debris will waft. It looks unintiutive, but your X value is the MINIMUM amount of time and the Y value is the MAXIMUM</param>
            <param name="waftDistance">A Vector2 for the amount of distance your debris will cover. It looks unintiutive, but your X value is the MINIMUM distance and the Y value is the MAXIMUM.</param>
            <param name="initialBurstDuration">A Vector2 for how long your "upward" time will be. It looks unintiutive, but your X value is the MINIMUM amount of time and the Y value is the MAXIMUM.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateDebrisObject(System.String,System.Boolean,System.Single,System.Single,System.Single,System.Single,tk2dSprite,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns a DebrisObject that you can add to a ShardCluster, which in turn can be used by your breakable  
            </summary>
            <param name="shardSpritePath">The sprite path of your DebrisObject.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards contact the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateAnimatedDebrisObject(System.String[],System.Int32,tk2dSpriteAnimationClip.WrapMode,System.Boolean,System.Single,System.Single,System.Single,System.Single,tk2dSprite,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns an animated DebrisObject that you can add to a ShardCluster, which in turn can be used by your breakable  
            </summary>
            <param name="shardSpritePaths">The sprite paths of your DebrisObject.</param>
            <param name="FPS">The FPS of your DebrisObject.</param>
            <param name="wrapMode">The wrap mode of the animated DebrisObject.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards hit the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateDebrisObjects(System.String[],System.Boolean,System.Single,System.Single,System.Single,System.Single,tk2dSprite,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns an array of DebrisObjects that you can add to a ShardCluster, which in turn can be used by your breakable. note that each Debris Object generated here will all use the same values you gave it
            </summary>
            <param name="shardSpritePaths">The sprite paths of your DebrisObjects.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards hit the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateAnimatedDebrisObjects(System.Collections.Generic.List{System.String[]},System.Int32,tk2dSpriteAnimationClip.WrapMode,System.Boolean,tk2dSprite,System.Single,System.Single,System.Single,System.Single,System.Single,System.String,UnityEngine.GameObject,System.Int32,System.Boolean,GoopDefinition,System.Single)">
            <summary>
            Generates, and returns an array of animated DebrisObjects that you can add to a ShardCluster, which in turn can be used by your breakable. note that each Debris Object generated here will all use the same values you gave it
            </summary>
            <param name="shardSpritePathsList">A list of different sprite paths of your DebrisObjects. Each entry in the list will be its ownb animated object!</param>
            <param name="FPS">The FPS of your DebrisObject.</param>
            <param name="wrapMode">The wrap mode of the animated DebrisObject.</param>
            <param name="debrisObjectsCanRotate">Enables/Disables whether your shards can rotate in-flight.</param>
            <param name="LifeSpanMin">The minimum flight-time of your shards.</param>
            <param name="LifeSpanMax">The maximum flight-time of your shards.</param>
            <param name="AngularVelocity">How much your shards will rotate in-flight.</param>
            <param name="AngularVelocityVariance">Adds/removes some angular velocity to your shards when created. For example, having 40 AngularVelocity and an AngularVelocityVariance of 12 will set the AngularVelocity of your shards from anywhere between 28 and 52.</param>
            <param name="shadowSprite">The sprite of the shadow your DebrisObject will use. Leave this as null to not have a shadow.</param>
            <param name="Mass">Default of 1. The amount of additional weight applied to your DebrisObject</param>
            <param name="AudioEventName">The sound that will play when the shards hit the ground.</param>
            <param name="BounceVFX">The VFX that plays when your shards bounce.</param>
            <param name="DebrisBounceCount">The amount of times your shards will bounce.</param>
            <param name="DoesGoopOnRest">If true, will spawn goop on itself when it is in a resting state.</param>
            <param name="GoopType">The goop it will spawn if DoesGoopOnRest is true.</param>
            <param name="GoopRadius">The radius of the spawned goop.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateShardCluster(DebrisObject[],System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Generates, and returns a ShardCluster that you can add to your breakable to have it create shards. 
            </summary>
            <param name="debrisObjects">Your array of DebrisObjects</param>
            <param name="clusterForceMultiplier">The force applied multiplicatively onto the shards when they're created.</param>
            <param name="ClusterLaunchStrength">The amount of force applied multiplicatively to your shards when created.</param>
            <param name="MinClusterAmount">The minimum amount of shards that the shard cluster will spawn.</param>
            <param name="MaxClusterAmount">The maximum amount of shards that the shard cluster will spawn.</param>
            <param name="clusterRotationMultiplier">The amount of rotation applied multiplicatively.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateShardClustersFromArray(System.Collections.Generic.List{DebrisObject[]},System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Generates, and returns an array of ShardClusters that you can add to your breakable to have it create shards. note that each ShardCluster generated here will all use the same values you gave it
            </summary>
            <param name="debrisObjectList">Your list of arrays of DebrisObjects</param>
            <param name="clusterForceMultiplier">The force applied multiplicatively onto the shards when they're created.</param>
            <param name="ClusterLaunchStrength">The amount of force applied multiplicatively to your shards when created.</param>
            <param name="MinClusterAmount">The minimum amount of shards that the shard cluster will spawn.</param>
            <param name="MaxClusterAmount">The maximum amount of shards that the shard cluster will spawn.</param>
            <param name="clusterRotationMultiplier">The amount of rotation applied multiplicatively.</param>
        </member>
        <member name="M:Alexandria.BreakableAPI.BreakableAPIToolbox.GenerateDungeonPlaceable(System.Collections.Generic.Dictionary{UnityEngine.GameObject,System.Single},System.Int32,System.Int32,DungeonPrerequisite[])">
            <summary>
            Generates, and returns an array of DungeonPlaceable
            </summary>
            <param name="gameObjects">The dictionary of objects that get added to the placeable, and their respective chances of appearing. A single dungeon placeable can have multiple choices of object it can be.</param>
            <param name="placeableWidth">The width of the placeable. try to make all your gameobjects relatively the same size as the length and width of the placeable.</param>
            <param name="placeableLength">The length of the placeable. try to make all your gameobjects relatively the same size as the length and width of the placeable.</param>
            <param name="dungeonPrerequisites">the prerequisite required for the object to appear. Leave this as null to have no prerequisite.</param>
        </member>
        <member name="T:Alexandria.cAPI.Hat.CostumeSwapHatFixerPatch">
            <summary>Patch for recalculating hat offsets when the player swaps costumes in the Breach</summary>
        </member>
        <member name="T:Alexandria.cAPI.Hat.UpdateHatAnimationPatch">
            <summary>Preemptively move hat immediately after the player's sprite changes to avoid a 1-frame delay on hat offsets</summary>
        </member>
        <member name="T:Alexandria.cAPI.Hat.StartDodgeRolPatch">
            <summary>Initialize hat flipping immediately after initiating a dodge roll</summary>
        </member>
        <member name="T:Alexandria.cAPI.Hatabase">
            <summary>Cached and precomputed hat information</summary> 
        </member>
        <member name="T:Alexandria.cAPI.Hatabase.FrameOffset">
            <summary>Helper class for storing additional hat offsets for individual sprite definitions</summary>
        </member>
        <member name="T:Alexandria.cAPI.HatController.EnsureHatControllerPatch">
            <summary>Ensure any created PlayerControllers also have a HatController</summary>
        </member>
        <member name="T:Alexandria.cAPI.HatRoom.ProcessPlayerEnteredFoyerPatch">
            <summary>Regenerates the hat room every time the Breach loads</summary>
        </member>
        <member name="T:Alexandria.cAPI.HatRoom.OnFoyerStartPatch">
            <summary>Marks the hat room in need of regeneration every time the Breach is reloaded</summary>
        </member>
        <member name="M:Alexandria.cAPI.HatRoom.AddRuntimeHatRoom(Dungeonator.Dungeon,PrototypeDungeonRoom,System.Action{Dungeonator.RoomHandler},Dungeonator.DungeonData.LightGenerationStyle)">
            <summary>Mostly identical to the base game AddRuntimeRoom() function, with a hack to work around tiles failing to render when adding the room to the Breach</summary>
        </member>
        <member name="M:Alexandria.cAPI.HatRoom.GetPedestalRingOffsets(System.Int32,System.Int32@)">
            <summary>Logic for getting offsets in symmetrical rings around the center of the hat room</summary>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.SetupHat(System.String,System.Collections.Generic.List{System.String},System.Nullable{IntVector2},System.Int32,Alexandria.cAPI.Hat.HatAttachLevel,Alexandria.cAPI.Hat.HatDepthType,Alexandria.cAPI.Hat.HatRollReaction,System.String,System.String,System.Single,System.Single,System.Nullable{System.Boolean},System.Boolean,System.Collections.Generic.List{GungeonFlags},System.Collections.Generic.List{DungeonPrerequisite},System.String,System.Boolean)">
            <summary>Set up a new custom hat and register it in the hatabase</summary>
            <param name="name">
            The name of the hat as displayed in the hat room. Mandatory parameter.
            </param>
            <param name="spritePaths">
            A list of sprite paths for the hat. Sprite paths must end with [direction]_###.png, where ### is a three digit number starting with 001 and [direction]
             is one of "south", "north", "east", "west", "northeast", and "northwest". Hat directionality and animations are set up automatically depending on
             the list of sprite paths passed during set up. Mandatory parameter, but can be null, in which case SetupHatSprites() must be called manually later.
            </param>
            <param name="pixelOffset">
            The pixel offset of the hat relative to the default hat / eyewear position. Positve x is right, negative x is left, positive y is up, negative y is down.
             Defaults to (0,0).
            </param>
            <param name="fps">
            The frame rate of the hat's animations, if present. Defaults to 4.
            </param>
            <param name="attachLevel">
            Where the hat is positioned relatived to the player. HEAD_TOP positions the hat relative to the player's head, and EYE_LEVEL positions the hat relative
             to the player's eyes. Defaults to HEAD_TOP.
            </param>
            <param name="depthType">
            The poisitioning of the hat relative to the camera.
              ALWAYS_IN_FRONT makes the hat render closer to the camera than the player regardless of facing direction.
              ALWAYS_BEHIND makes the hat render farther from the camera than the player regardless of facing direction.
              BEHIND_WHEN_FACING_BACK makes the hat render closer to the camera when the player is facing forward, and farther from the camera when the player is facing backward.
              IN_FRONT_WHEN_FACING_BACK makes the hat render farther from the camera when the player is facing forward, and closer to the camera when the player is facing backward.
            Defaults to ALWAYS_IN_FRONT.
            </param>
            <param name="hatRollReaction">
            How the hat reacts to dodge rolls.
              FLIP makes the hat flip above the player for the duration of the dodge roll.
              VANISH makes the hat completely disappear while the player is dodge rolling.
              NONE continues to render the hat as normal while the player is dodge rolling.
            Defaults to FLIP.
            </param>
            <param name="flipStartedSound">
            An optional sound to play when the hat flips at the beginning of a dodge roll. Has no effect unless hatRollReaction is FLIP.
            </param>
            <param name="flipEndedSound">
            An optional sound to play when the hat lands at the end of a dodge roll. Has no effect unless hatRollReaction is FLIP.
            </param>
            <param name="flipSpeed">
            The number of full rotations the hat will make during a dodge roll. Can be fractional (e.g., 1.5f). Setting to 0 makes the hat go straight up and down.
             Has no effect unless hatRollReaction is FLIP. Defaults to 1f.
            </param>
            <param name="flipHeight">
            A multiplier for how high the hat will flip relative to the default flip height. Has no effect unless hatRollReaction is FLIP. Defaults to 1f.
            </param>
            <param name="flipHorizontalWithPlayer">
            Whether the hat sprite will flip horizontally with the player's sprite when facing left. Defaults to automatic (null), which is true for non-directional and
             north-south hats, and false for east-west, 4-way, and 6-way hats.
            </param>
            <param name="excludeFromHatRoom">
            If true, this hat will not show up in the hat room, and can only be accessed via code and console commands. Defaults to false.
            </param>
            <param name="unlockFlags">
            An optional list of GungeonFlags required to unlock this hat. Can be given custom flags using ExtendedEnums.
            </param>
            <param name="unlockPrereqs">
            An optional list of DungeonPrerequisite required to unlock this hat. Can be given custom prerequisites using ExtendedEnums.
            </param>
            <param name="unlockHint">
            An optional unlock hint to display when interacting with the hat's pedestal in the hat room while the hat is locked. Has no effect if the hat is not an
             unlockable hat or if the hat is excluded from the hat room.
            </param>
            <param name="showSilhouetteWhenLocked">
            If true, a silhouette of the hat will appear above its pedestal in the hat room while the hat is locked; if false, the pedestal will simply be empty while
             the hat is locked. Has no effect if the hat is not an unlockable hat or if the hat is excluded from the hat room. Defaults to false.
            </param>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.SetupHatOffsets(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Set up default hat offsets for a custom character</summary>
            <param name="characterObjectName">
            The name of the player prefab, as accessed by `prefabObject.name`. Will usually be "PlayerXXXX(Clone)".
            </param>
            <param name="defaultHeadXOffset">Default head-top hat pixel x-offset for the character.</param>
            <param name="defaultHeadYOffset">Default head-top hat pixel y-offset for the character.</param>
            <param name="defaultEyeXOffset">Default eye-level hat pixel x-offset for the character.</param>
            <param name="defaultEyeYOffset">Default eye-level hat pixel y-offset for the character.</param>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.SetupFlippedHatOffsets(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Set up default flipped hat offsets for a custom character</summary>
            <param name="characterObjectName">
            The name of the player prefab, as accessed by `prefabObject.name`. Will usually be "PlayerXXXX(Clone)".
            </param>
            <param name="defaultHeadXOffset">Default flipped head-top hat pixel x-offset for the character.</param>
            <param name="defaultHeadYOffset">Default flipped head-top hat pixel y-offset for the character.</param>
            <param name="defaultEyeXOffset">Default flipped eye-level hat pixel x-offset for the character.</param>
            <param name="defaultEyeYOffset">Default flipped eye-level hat pixel y-offset for the character.</param>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.AddHatOffset(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Create additional frame-specific hat offsets for a custom character</summary>
            <param name="characterObjectName">
            The name of the player prefab, as accessed by `prefabObject.name`. Will usually be "PlayerXXXX(Clone)".
            </param>
            <param name="animationFrameName">
            The name of the frame of animation whose offset should be adjusted.
            </param>
            <param name="headXOffset">Head-top hat pixel x-offset for the animation frame.</param>
            <param name="headYOffset">Head-top hat pixel y-offset for the animation frame.</param>
            <param name="eyeXOffset">Eye-level hat pixel x-offset for the animation frame.</param>
            <param name="eyeYOffset">Eye-level hat pixel y-offset for the animation frame.</param>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.PrintAnimationFramesForHats(PlayerController)">
            <summary>
            Print out a list of all unique base animation frames for a character that can be set by <see cref="M:Alexandria.cAPI.HatUtility.AddHatOffset(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})"/> to the console.
            </summary>
            <param name="player">The PlayerController whose animation frames should be printed.></param>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.SetupHatSprites(Alexandria.cAPI.Hat,System.Collections.Generic.List{System.String},System.Collections.Generic.List{tk2dSpriteDefinition},System.Int32,System.Reflection.Assembly)">
            <summary>Sets up a hat's sprites from a list of sprite paths or sprite definitions. Exactle one of spritePaths or spriteDefs must be non-null.</summary>
            <param name="hat">The hat for which sprites should be set up.</param>
            <param name="spritePaths">A list of resource paths within callingASM from which the hat's sprites should be created.</param>
            <param name="spriteDefs">A list of preconfigured sprite definitions from which the hat's sprites should be created.</param>
            <param name="fps">The fps for all animations for this hat.</param>
            <param name="callingASM">If using spritePaths, the assembly from which the image resources should be loaded.</param>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.GetDatabaseFriendlyHatName(System.String)">
            <summary>Converts a hat's display name to the format it's stored in within the hat database</summary>
        </member>
        <member name="M:Alexandria.cAPI.HatUtility.CurrentHat(PlayerController)">
            <summary>Retrieve's the player's current hat, if they're wearing one</summary>
        </member>
        <member name="M:Alexandria.CharacterAPI.SpriteHandler.SpriteFromTexture(UnityEngine.Texture2D,UnityEngine.GameObject)">
            <summary>
            Returns an object with a tk2dSprite component with the texture provided
            </summary>
        </member>
        <member name="M:Alexandria.CharacterAPI.SpriteHandler.ConstructDefinition(UnityEngine.Texture2D,UnityEngine.Material)">
            <summary>
            Constructs a new tk2dSpriteDefinition with the given texture
            </summary>
            <returns>A new sprite definition with the given texture</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.SpriteHandler.AddSpriteToCollection(UnityEngine.Texture2D,tk2dSpriteCollectionData,System.String)">
            <summary>
            Adds a sprite (from a texture) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.SpriteHandler.AddSpriteToCollectionWithAnchor(UnityEngine.Texture2D,tk2dSpriteCollectionData,tk2dBaseSprite.Anchor,System.String)">
            <summary>
            Adds a sprite (from a texture) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.SpriteHandler.AddSpriteToCollection(UnityEngine.Texture2D,tk2dSpriteCollectionData,UnityEngine.Material,System.String)">
            <summary>
            Adds a sprite (from a texture) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.AddNewItemToAtlas(dfAtlas,UnityEngine.Texture2D,System.String)">
            <summary>
            Builds and adds a new <see cref="T:dfAtlas.ItemInfo"/> to <paramref name="atlas"/> with the texture of <paramref name="tex"/> and the name of <paramref name="name"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to add the new <see cref="T:dfAtlas.ItemInfo"/> to.</param>
            <param name="tex">The texture of the new <see cref="T:dfAtlas.ItemInfo"/>.</param>
            <param name="name">The name of the new <see cref="T:dfAtlas.ItemInfo"/>. If <see langword="null"/>, it will default to <paramref name="tex"/>'s name.</param>
            <returns>The built <see cref="T:dfAtlas.ItemInfo"/>.</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.AddNewItemToAtlas(dfAtlas,tk2dSpriteDefinition,System.String)">
            <summary>
            Builds and adds a new <see cref="T:dfAtlas.ItemInfo"/> to <paramref name="atlas"/> with the sprite of <paramref name="def"/> and the name of <paramref name="name"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to add the new <see cref="T:dfAtlas.ItemInfo"/> to.</param>
            <param name="def">The sprite of the new <see cref="T:dfAtlas.ItemInfo"/>.</param>
            <param name="name">The name of the new <see cref="T:dfAtlas.ItemInfo"/>. If <see langword="null"/>, it will default to <paramref name="def"/>'s name.</param>
            <returns>The built <see cref="T:dfAtlas.ItemInfo"/>.</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.AddNewItemToAtlas(dfAtlas,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Builds and adds a new <see cref="T:dfAtlas.ItemInfo"/> to <paramref name="atlas"/> with the specified <paramref name="resourcePath"/> and the name of <paramref name="name"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to add the new <see cref="T:dfAtlas.ItemInfo"/> to.</param>
            <param name="resourcePath">The resource path for the image of the new <see cref="T:dfAtlas.ItemInfo"/>.</param>
            <param name="name">The name of the new <see cref="T:dfAtlas.ItemInfo"/>. If <see langword="null"/>, it will default to <paramref name="tex"/>'s name.</param>
            <returns>The built <see cref="T:dfAtlas.ItemInfo"/>.</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.AddUISprite(UnityEngine.Texture2D,System.String)">
            <summary>Convenience function for adding a texture to the UI atlas.</summary>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.AddUISprite(tk2dSpriteDefinition,System.String)">
            <summary>Convenience function for adding a sprite to the UI atlas.</summary>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.AddUISprite(System.String,System.String)">
            <summary>Convenience function for adding an image resource to the UI atlas.</summary>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.GetPixelRegions(dfAtlas)">
            <summary>
            Gets the pixel regions of <paramref name="atlas"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to get the pixel regions from.</param>
            <returns>A list with all pixel regions in <paramref name="atlas"/></returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.GetFreeRegions(dfAtlas)">
            <summary>
            Gets the free regions of <paramref name="atlas"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to get the free regions from.</param>
            <returns>A list with all free regions in <paramref name="atlas"/></returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.Convert``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            Converts a list of the type <typeparamref name="T"/> to a list of the type <typeparamref name="T2"/> using <paramref name="convertor"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="self"/> list.</typeparam>
            <typeparam name="T2">The type to convert the <paramref name="self"/> list to.</typeparam>
            <param name="self">The original list.</param>
            <param name="convertor">A delegate that converts an element of type <typeparamref name="T"/> to an element of a type <typeparamref name="T2"/>.</param>
            <returns>The converted list of type <typeparamref name="T2"/></returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.FindFirstValidEmptySpace(dfAtlas,IntVector2)">
            <summary>
            Gets the first empty space in <paramref name="atlas"/> that has at least the size of <paramref name="pixelScale"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to find the empty space in.</param>
            <param name="pixelScale">The required size of the empty space.</param>
            <returns>The rect of the empty space divided by the atlas texture's size.</returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.ResizeAtlas(dfAtlas,IntVector2)">
            <summary>
            Resizes <paramref name="atlas"/> and all of it's <see cref="T:dfAtlas.ItemInfo"/>s.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to resize/</param>
            <param name="newDimensions"><paramref name="atlas"/>'s new size.</param>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.ResizeBetter(UnityEngine.Texture2D,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes <paramref name="tex"/> without it losing it's pixel information.
            </summary>
            <param name="tex">The <see cref="T:UnityEngine.Texture2D"/> to resize.</param>
            <param name="width">The <paramref name="tex"/>'s new width.</param>
            <param name="height">The <paramref name="tex"/>'s new height.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.CharacterAPI.ToolsCharApi.ToVector2Int(IntVector2)">
            <summary>
            Converts <paramref name="vector"/> to a <see cref="T:UnityEngine.Vector2Int"/>.
            </summary>
            <param name="vector">The <see cref="T:IntVector2"/> to convert.</param>
            <returns><paramref name="vector"/> converted to <see cref="T:UnityEngine.Vector2Int"/>.</returns>
        </member>
        <member name="M:Alexandria.ChestAPI.ChestUtility.AddFuse(Chest)">
            <summary>
            Attaches a fuse to the chest, and ignites it. Does nothing if the chest is already fused.
            </summary>
            <param name="chest">The chest to be fused.</param>
        </member>
        <member name="M:Alexandria.ChestAPI.ChestUtility.GetFuse(Chest)">
            <summary>
            Returns the fuse attached to a chest, if one is present. NOTE: If you're using the stripped DLL, you can simply use 'chest.extantFuse'
            </summary>
            <param name="chest">The chest to be checked.</param>
        </member>
        <member name="M:Alexandria.ChestAPI.ChestUtility.SpawnChestEasy(IntVector2,Alexandria.ChestAPI.ChestUtility.ChestTier,System.Boolean,Chest.GeneralChestType,Alexandria.Misc.ThreeStateValue,Alexandria.Misc.ThreeStateValue)">
            <summary>
            A simple, advanced method for spawning reward chests. 
            </summary>
            <param name="location">The position at which the chest should be spawned.</param>
            <param name="tier">The tier of chest that should be spawned. Includes edge cases such as Glitched, Rainbow, Secret Rainbow, and Rat, but cannot spawn Truth Chests.</param>
            <param name="locked">Whether or not the chest should be locked.</param>
            <param name="type">Whether the chest should spawn an item, gun, or be random.</param>
            <param name="mimic">Whether the chest should be a mimic. Leave UNSPECIFIED for regular chances.</param>
            <param name="fused">Whether the chest should be fused.</param>
        </member>
        <member name="M:Alexandria.ChestAPI.ChestUtility.GetChestTier(Chest)">
            <summary>
            Returns the quality of a chest in the form of the custom ChestTier enum. Chests which do not meet any of the other requirements will return type 'OTHER'.
            </summary>
            <param name="chest">The chest to be checked.</param>
        </member>
        <member name="T:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll">
            <summary>Public API surface for <see cref="T:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll"/></summary>
            Private API for CustomDodgeRoll
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll._owner">
            <summary>The PlayerController owner of this dodge roll.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll._isDodging">
            <summary>Whether <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ContinueDodgeRoll"/> is currently running.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll._dodgeButtonHeld">
            <summary>Whether the player has been continuously holding the dodge button since initiating the dodge roll.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll._dodgeButtonPressed">
            <summary>Whether the player is currently pressing the dodge button at all.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.countsAsDodgeRolling">
            <summary>
            Whether the base game's <see cref="P:PlayerController.IsDodgeRolling"/> property returns true while this dodge roll is active.
            This property should generally just return "true" unless you REALLY know what you're getting into.
            </summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.canDodge">
            <summary>Custom logic imposing additional restrictions on whether the player can dodge roll.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.canMultidodge">
            <summary>Whether this dodge roll can be initiated again while it's already in progress.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.canDodgeInPlace">
            <summary>Whether this dodge roll can be initiated while the player is not moving.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.canUseWeapon">
            <summary>Whether the player can attack while the dodge roll is active.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.canSlide">
            <summary>Whether the dodge roll can slide over tables while active.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.isAirborne">
            <summary>Whether the dodge roll counts as airborne for pitfall purposes while active.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.dodgesProjectiles">
            <summary>Whether the dodge roll goes through projectiles while active.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.lockedDirection">
            <summary>Whether the player is direction-locked while the dodge roll is active.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.takesContactDamage">
            <summary>Whether the player takes contact damage from enemies while the dodge roll is active.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.overrideRollDamage">
            <summary>Base damage to deal when contacting an enemy while the dodge roll is active. If less than 0, defaults to player's base roll damage stat.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.fireReduction">
            <summary>Percent by which the player's fire meter is reduced upon initiating the dodge roll (vanilla dodge rolls reduce it by 50%).</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.bufferWindow">
            <summary>How many seconds in advance the dodge roll can be buffered. Set to 0 to disable buffering.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.BeginDodgeRoll(UnityEngine.Vector2,System.Boolean,System.Boolean)">
            <summary>Called automatically when the player successfully begins the custom dodge roll.</summary>
            <param name="direction">The direction the player initiated the dodge roll in.</param>
            <param name="buffered">Whether the dodge roll was buffered.</param>
            <param name="wasAlreadyDodging">
            Whether we were already dodging prior to beginning this custom dodge roll. Only possible if <see cref="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.canMultidodge"/> returns true.
            </param>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ContinueDodgeRoll">
            <summary>
            Called automatically after <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.BeginDodgeRoll(UnityEngine.Vector2,System.Boolean,System.Boolean)"/> while the custom dodge roll is active.
            If this coroutine finishes naturally, <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.FinishDodgeRoll(System.Boolean)"/> is called with aborted == false.
            If this coroutine is aborted before finishing, <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.FinishDodgeRoll(System.Boolean)"/> is called with aborted == true.
            </summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.FinishDodgeRoll(System.Boolean)">
            <summary>Called automatically when the player completes the custom dodge roll (i.e., after <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ContinueDodgeRoll"/> finishes).</summary>
            <param name="aborted">Whether <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ContinueDodgeRoll"/> was ended early for any reason (multidodge, cutscene, opening a chest, etc.).</param>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.AbortDodgeRoll">
            <summary>If the custom dodge roll is active, immediately ends <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ContinueDodgeRoll"/> and calls <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.FinishDodgeRoll(System.Boolean)"/> with aborted == true.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ForceVanillaDodgeRoll">
            <summary>Forcibly begin a vanilla dodge roll.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ForceVanillaDodgeRoll(UnityEngine.Vector2)">
            <summary>Forcibly begin a vanilla dodge roll in a specific direction.</summary>
        </member>
        <member name="F:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll._activeDodgeRoll">
            <summary>The currently-running <see cref="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll.ContinueDodgeRoll"/> coroutine.</summary>
        </member>
        <member name="P:Alexandria.CustomDodgeRollAPI.CustomDodgeRoll._bufferTime">
            <summary>The last time a dodge roll input was buffered.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollItem.CustomDodgeRoll">
            <summary>The CustomDodgeRoll, if any, this item grants while held</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollItem.ExtraMidairDodgeRolls">
            <summary>The number of extra midair dodge rolls this item grants</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.HandleStartCustomDodgeRoll(PlayerController,UnityEngine.Vector2)">
            <summary>The magic that actually handles initiating custom dodge rolls.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.HandleDodgeRollBuffering(PlayerController)">
            <summary>Buffer dodge roll inputs even if we're not otherwise accepting inputs.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.AbortDodgeRollWhenOpeningChest(PlayerController)">
            <summary>Make sure opening chests disables input until the item get animation finishes playing.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.RecomputeActiveDodgeRoll(PlayerStats,PlayerController)">
            <summary>Recompute active dodge roll items when the player's stats are recomputed.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.PlayerControllerCheckDodgeRollDepthIL(MonoMod.Cil.ILContext)">
            <summary>Allow dodge roll items to increase the number of midair dodge rolls a-la springheel boots</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.DisableBloodiedScarf(PlayerController,System.Boolean@)">
            <summary>Allow custom dodge rolls to override Bloodied Scarf.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CountsAsDodgeRolling(PlayerController,System.Boolean@)">
            <summary>Allow custom dodge rolls to effectively use IsDodgeRolling unless they specifically opt out of it.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CheckCanAttackDuringCustomDodgeRollIL(MonoMod.Cil.ILContext)">
            <summary>Allow the player to attack during custom dodge rolls.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CheckIfCustomDodgeRollIsGrounded(PlayerController,System.Boolean@)">
            <summary>Determine whether a custom dodge roll counts as airborne for pit traversal purposes.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CheckIfCustomDodgeRollDodgesProjectilesIL(MonoMod.Cil.ILContext)">
            <summary>Determine whether a custom dodge roll grants the player projectile immunity while active.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.ForceStopCustomDodgeRoll(PlayerController)">
            <summary>Make sure custom dodge rolls respond to ForceStopDodgeRoll()</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CheckIfCustomDodgeRollIsDirectionLockedIL(MonoMod.Cil.ILContext)">
            <summary>Allow custom dodge rolls to ignore locked dodge roll direction if they want.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CheckIfCustomDodgeRollTakesContactDamageIL(MonoMod.Cil.ILContext)">
            <summary>Allow custom dodge rolls to avoid contact damage with enemies if they want.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.GetOverrideDodgeRollDamageIL(MonoMod.Cil.ILContext)">
            <summary>Allow custom dodge rolls to override base roll damage for both normal roll damage and check-if-enemy-is-killed roll damage.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CheckIfCustomDodgeRollCanSlideIL(MonoMod.Cil.ILContext)">
            <summary>Allow custom dodge rolls to slide over tables if they want.</summary>
        </member>
        <member name="M:Alexandria.CustomDodgeRollAPI.CustomDodgeRollPatches.CheckIfCustomDodgeRollIsSlidingIL(MonoMod.Cil.ILContext)">
            <summary>Allow custom dodge rolls to finish sliding over tables.</summary>
        </member>
        <member name="M:Alexandria.DungeonAPI.MasteryOverrideHandler.InitInternal">
            <summary>
            Initialises the hooks which allow the mastery override system to function.
            </summary>
        </member>
        <member name="M:Alexandria.DungeonAPI.MasteryOverrideHandler.RegisterFloorForMasterySpawn(Alexandria.DungeonAPI.MasteryOverrideHandler.ViableRegisterFloors)">
            <summary>
            'Registers' the specified floor to spawn a master round. 
            By default, will spawn the Keep Master Round. Use 'OnRewardPedestalDetermineContents' in CustomActions to change this.
            </summary>
            <param name="floorToRegister">The floor you want to register. Only three of the five floors without masteries are supported, due to Dodge Roll hardcoding boss rewards.</param>
        </member>
        <member name="M:Alexandria.DungeonAPI.MasteryOverrideHandler.GetOrLoadByNameHookInternal(System.Func{System.String,Dungeonator.Dungeon},System.String)">
            <summary>
            The hook method which allows the mastery override system to function.
            </summary>
            <param name="orig">The original method.</param>
            <param name="name">The dungeon name being loaded..</param>
        </member>
        <member name="M:Alexandria.DungeonAPI.MasteryOverrideHandler.ContainsMasteryTokenForCurrentLevel(RewardPedestal)">
            <summary>
            Returns true if the target pedestal contains the default Master Round item for the current level definition.
            </summary>
            <param name="pedestal">The target pedestal.</param>
        </member>
        <member name="M:Alexandria.DungeonAPI.MasteryOverrideHandler.GetOrLoadByName_Orig(System.String)">
            <summary>
            Loads a specified Dungeon prefab based on the string name. DO NOT USE IF YOU DONT KNOW WHAT YOU'RE DOING.
            </summary>
            <param name="name">The name of the Dungeon.</param>
        </member>
        <member name="M:Alexandria.DungeonAPI.RoomFactory.LoadRoomsFromRoomDirectory(System.String,System.String)">
            <summary>
            Loads all rooms in a given folder, similar to how Gun Sprites are setup (Example: LoadRoomsFromRoomDirectory("Alex", this.FolderPath() + "/newRooms");
            </summary>
            <param name="modPrefix"></param>
            <param name="roomDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.DungeonAPI.RoomFactory.BuildFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="roomPath"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="F:Alexandria.DungeonAPI.StaticReferences.StoredRoomObjects">
            <summary>
            LEGACY VERSION, use customObjects instead.
            </summary>
        </member>
        <member name="F:Alexandria.DungeonAPI.StaticReferences.StoredDungeonPlaceables">
            <summary>
            LEGACY VERSION, use customPlaceables instead.
            </summary>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.DeleteOwnedBullets(GameActor,System.Single,System.Boolean)">
            <summary>
            Deletes all bullets belonging to the GameActor.
            </summary>
            <param name="enemy">The target actor.</param>
            <param name="chancePerProjectile">The individual chance per bullet for it to be deleted. 100% by default.</param>
            <param name="deleteBulletLimbs">If true 'bullet limbs' belonging to the actor will also be deleted. Bullet limbs exist on Misfire Beasts, Revolvenants, and others.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.DoCorrectForWalls(AIActor)">
            <summary>
            Updates the position of the AIActor to hopefully prevent it from becoming stuck in a wall. NOT FOOLPROOF.
            </summary>
            <param name="enemy">The target AIActor.</param>       
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.IsInMinecart(AIActor)">
            <summary>
            Returns true if the AIActor is riding in a minecart.
            </summary>
            <param name="target">The target AIActor.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.ClosestPointOnEnemy(AIActor,UnityEngine.Vector2)">
            <summary>
            Returns The closest Vector2 position on the enemy's hitbox to the given position.
            </summary>
            <param name="target">The target AIActor.</param>
            <param name="pointComparison">The Vector2 position to which the closest point on the enemy's hitbox should be calculated.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.ClosestPointOnRigidBody(SpeculativeRigidbody,UnityEngine.Vector2)">
            <summary>
            Returns The closest Vector2 position on the SpeculativeRigidbody's hitbox to the given position.
            </summary>
            <param name="target">The target SpeculativeRigidbody.</param>
            <param name="pointComparison">The Vector2 position to which the closest point on the SpeculativeRigidbody's hitbox should be calculated.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.IsSecretlyTheMineFlayer(AIActor)">
            <summary>
            Returns true AIActor is 'secretly' the Mine Flayer as part of the Mine Flayer's bell shell-game attack.
            </summary>
            <param name="target">The AIActor to be checked.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.ApplyGlitter(AIActor)">
            <summary>
            Applies the 'Glitter' visual effect from the Mailbox to the AIActor.
            </summary>
            <param name="target">The AIActor to be glittered.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.DoGeniePunch(AIActor,PlayerController)">
            <summary>
            Causes a Genie to punch the AIActor, like the effect of the Magic Lamp.
            </summary>
            <param name="enemy">The AIActor to be punched.</param>
            <param name="owner">The owner of the Genie.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.GetDirectionalAnimation(AIAnimator,System.String)">
            <summary>
            Returns a directional animation on the AIAnimator corresponding to the given animation name.
            </summary>
            <param name="self">The AIAnimator to be checked.</param>
            <param name="animName">The name of the animation being checked for.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.AIActorUtility.AdvancedTransmogrify(AIActor,AIActor,UnityEngine.GameObject,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            A more advanced method of transmogrifying an enemy into another enemy. Returns the resulting enemy. Returns null if the original enemy could not be transmogrified.
            </summary>
            <param name="startEnemy">The enemy who will be transmogrified.</param>
            <param name="EnemyPrefab">The prefab of the enemy that the original will be transmogrified into.</param>
            <param name="EffectVFX">The VFX to be played at the position of the transmogrification.</param>
            <param name="audioEvent">The audio to be played when the transmogrification occurs.</param>
            <param name="ignoreAlreadyTransmogged">If true, will be unable to transmogrify enemies who have already been transmogrified.</param>
            <param name="guidsToIgnore">If the target's guid is present in this list, it cannot be transmogrified.</param>
            <param name="tagsToIgnore">If the target has any of the tags present in this list, it cannot be transmogrified.</param>
            <param name="defuseExplosives">If true, enemies set to explode upon death will not explode when transmogrified.</param>
            <param name="carryOverRewards">If true, the loot drops of the old enemy will carry over to the new enemy.</param>
            <param name="maintainHealthPercent">If true, the new enemy's percentage of remaining HP will be the same as the old enemy's percentage of remaining HP.</param>
            <param name="maintainsJammedState">If true, the jamedness of the new enemy depends on the jamedness of the old enemy.</param>
            <param name="giveIsTransmogrifiedBool">If true, sets the new actor's 'IsTransmogrified' bool to true. If false, there will be no way to tell that the actor has been transmogrified.</param>
            <param name="logEverything">If true, non-essential information about why enemies were unable to be transmogged will be added to the log. Do not leave true in release builds.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.EnemyBuildingTools.AddAIBeamShooter(AIActor,UnityEngine.Transform,System.String,Projectile,ProjectileModule,System.Single)">
            <summary>
            Adds an AIBeamShooter component to an enemy. AIBeamShooters are important for enemies to be able to use beam-related behaviors.
            </summary>
            <param name="enemy">The target actor.</param>
            <param name="transform">The position at which the beam, when created, will fire from.</param>
            <param name="name">The name of your AIBeamShooter component.</param>
            <param name="beamProjectile">The projectile component of your beam.</param>
            <param name="beamModule">The projectile module which houses your beamProjectile.</param>
            <param name="angle">The starting angle of your beam when it is fired. Used only by specific things.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.EnemyBuildingTools.AddNewDirectionAnimation(AIAnimator,System.String,System.String[],DirectionalAnimation.FlipType[],DirectionalAnimation.DirectionType)">
            <summary>
            Adds a directional animation to your AIAnimator (Mostly found in enemies). Directional animations control the animations that play depending on direction.
            </summary>
            <param name="animator">The target AIAnimator.</param>
            <param name="Prefix">The prefix of your directional animation. When making your enemy play a specific animation, use this prefix to play the animation so it also accounts for direction.</param>
            <param name="animationNames">All of the tk2d sprite animations in your directional animation. These HAVE to be set up in specific configurations. Check out the bottom of this page to see how https://mtgmodders.gitbook.io/etg-modding-guide/misc/making-an-enemy</param>
            <param name="flipType">The amount of different animations your directional animation uses. Ex: a directional aniamtion with left-right aniamtions will be 2.</param>
            <param name="directionType">The direction type of your animator. This will change how many angles it will take into account for. Refer to https://mtgmodders.gitbook.io/etg-modding-guide/misc/making-an-enemy for more detail.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.EnemyBuildingTools.DestroyUnnecessaryHandObjects(UnityEngine.Transform)">
            <summary>
            Destroys any remnant hand objects on your enemy.
            </summary>
            <param name="transform">The targets Transform.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.EnemyBuildingTools.AddShadowToAIActor(AIActor,UnityEngine.GameObject,UnityEngine.Vector2,System.String)">
            <summary>
            Links a gameobject to your enemy to be its shadow.
            </summary>
            <param name="actor">The target.</param>
            <param name="shadowObject">The gameobject that will act as a shadow.</param>
            <param name="attachpoint">The position of the shadow. Must be somewhere on the enemy, so use your enemy position as your start position, as unintuitive as it seems.</param>
            <param name="name">The name of your shadow object.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.EnemyBuildingTools.GenerateShootPoint(UnityEngine.GameObject,UnityEngine.Vector2,System.String)">
            <summary>
            Generates, and returns a gameobject that can be used as a shootpoint.
            </summary>
            <param name="attacher">The target.</param>
            <param name="attachpoint">The position of the shoot point. Must be somewhere on the enemy, so use your enemy position as your start position, as unintuitive as it seems.</param>
            <param name="name">The name of your shoot point.</param>
        </member>
        <member name="M:Alexandria.EnemyAPI.EnemyBuildingTools.CopyBulletBankEntry(AIBulletBank.Entry,System.String,System.String,VFXPool,System.Boolean)">
            <summary>
            Returns a deplicate BulletBank.Entry that you can modify the bullet Object of without altering the original. Useful for making specific projectiles fire without audio or have them have special effects i.e hitscan.
            </summary>
            <param name="entryToCopy">The enrty you are copying in the first place.</param>
            <param name="Name">Your new Bullet Bank entry name. You will use this name when trying to spawn a projectile from this entry.</param>
            <param name="AudioEvent">The audio event your projectile will sound when it is fired. Change this to "DNC" if you want to keep the original audio, or set it to null to have none.</param>
            <param name="muzzleflashVFX">Your muzzle flash VFX it will play when the bullet is fired.</param>
            <param name="ChangeMuzzleFlashToEmpty">If set to true and muzzleflashVFX is NULL, will remove the muzzleflash from your entry.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ProjectileSlashingBehaviour.SlashHitTarget(GameActor,System.Boolean)">
            <summary>
            Called when the slash hits a GameActor. Can be overridden for custom effects.
            </summary>
            <param name="target">The game actor that has been hit by the slash.</param>
            <param name="fatal">Whether or not the slash killed the actor it hit.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ProjectileSlashingBehaviour.SlashHitBullet(Projectile)">
            <summary>
            Called when the slash hits a projectile.
            </summary>
            <param name="target">The projectile that has been hit by the slash.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ProjectileSlashingBehaviour.SlashHitMinorBreakable(MinorBreakable)">
            <summary>
            Called when the slash hits a Minor breakable object
            </summary>
            <param name="target">The object that has been hit by the slash.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ProjectileSlashingBehaviour.SlashHitMajorBreakable(MajorBreakable)">
            <summary>
            Called when the slash hits a Major breakable object
            </summary>
            <param name="target">The object that has been hit by the slash.</param>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.initialDelay">
            <summary>
            How long should the projectile wait after spawning before doing it's first slash. Zero by default, meaning it occurs instantly.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.timeBetweenSlashes">
            <summary>
            How long the projectile will wait between performing subsequent slashes after the first.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.SlashDamageUsesBaseProjectileDamage">
            <summary>
            If true, the slash's damage, boss damage multiplier, jammed damage multiplier, and knockback stats will be equal to the base projectile's stats.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.DestroyBaseAfterFirstSlash">
            <summary>
            If true, the base projectile will be erased after performing it's first slash/sequence of slashes.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.DestroysOnlyComponentAfterFirstSlash">
            <summary>
            If true, the base projectile will only erase the slashing COMPONENT after performing it's first slash/sequence of slashes.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.slashParameters">
            <summary>
            The data which defines the exact nature of the slash created.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.timeBetweenCustomSequenceSlashes">
            <summary>
            The time between slashes in a custom sequence. Only works if customSequence is set.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.customSequence">
            <summary>
            A list of angles (0-360) where 0 is the projectile's direction of travel. If set, when performing a slash the projectile will instead perform a sequence of slashes corresponding to the angles in the sequence.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.ProjectileSlashingBehaviour.angleVariance">
            <summary>
            If set, the precise direction of the slash relative to the base projectile's direction will be able to vary by up to that number of degrees in either direction.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.LabelablePlayerItemSetup.InitLabelHookInternal">
            <summary>
            Initialises the hooks necessary to make labelable player items functional.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.LabelablePlayerItemSetup.UpdateCustomLabelHookInternal(System.Action{GameUIItemController,PlayerItem,System.Collections.Generic.List{PlayerItem}},GameUIItemController,PlayerItem,System.Collections.Generic.List{PlayerItem})">
            <summary>
            A hook method involved in making labelable player items functional.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.GetProperShootingSpeed(Gun)">
            <summary>
            Returns the fire delay of the gun. If the gun is Charge-style, adds the charge time between shots.
            If the gun has one bullet in a clip, includes the reload time.
            </summary>
            <param name="gun">The gun to be examined.</param>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.IDsToSpawn">
            <summary>
            An array of gun IDs that will be spawned when the orbital synergy is activated.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.RequiredSynergy">
            <summary>
            The synergy required to activate the hovering gun. If left null or empty, no synergy will be required.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.currentHoveringGuns">
            <summary>
            A list of currently active hovering guns spawned by the synergy controller.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.PositionType">
            <summary>
            Controls where the hovering guns hover. If OVERHEAD, the gun will appear above the owner. If CIRCULAR, the gun will orbit the player.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.AimType">
            <summary>
            Controls how the hovering gun will aim. 
            If set to NEAREST_ENEMY, the gun will automatically point at the closest target.
            If set to PLAYER_AIM, the gun will match the owner's aim direction.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.FireType">
            <summary>
            Controls when the hovering gun will attack. Not to be confused with firerate.
            If set to ON_RELOAD, the gun will attack when the player reloads. 
            If set to ON_COOLDOWN, the gun will attack continuously.
            If set to ON_DODGED_BULLET, the gun will attack when the player dodges a bullet.
            If set to ON_FIRED_GUN, the gun will attack when the player presses the fire button.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.requiresTargetGunInInventory">
            <summary>
            If true, orbiting guns will only spawn if the Gun ID they're based on is actually present in the player's inventory.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.requiresBaseGunInHand">
            <summary>
            If true, orbiting guns will only be active when the player is actively holding the gun that this component is attached to.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.fireDelayBasedOnGun">
            <summary>
            If true, sets the fire delay of orbital guns to the fire delay of the gun they are based on.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.fireDelayBenefitsFromPlayerFirerate">
            <summary>
            If true, the fire delay of orbital guns will benefit from the player's firerate stat.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.chanceToSpawnOnTrigger">
            <summary>
            If Trigger is set to any style other than CONSTANT, this controls the percentage chance that activating a trigger will spawn the orbiting guns.
            0% activation chance at 0, 50% activation chance at 0.5, and 100% activation chance at 1.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.reqActiveItemID">
            <summary>
            If Trigger style is set to ON_ACTIVE_ITEM, this integer determines the ID of the active item that must be used to activate the orbiting guns.
            If left at -1, all active items will work to activate the orbiting guns.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.FireCooldown">
            <summary>
            The time between bullets fired from the orbiting gun.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.BeamFireDuration">
            <summary>
            Controls how long orbital beam weapons will shoot for once triggered.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.OnlyOnEmptyReload">
            <summary>
            If true, and firetype is set to ON_RELOAD, orbiting guns will only shoot if the player reloads an EMPTY clip.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.ShootAudioEvent">
            <summary>
            The audio event that plays when the orbiting guns fire.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.Trigger">
            <summary>
            Determines the trigger that causes the orbiting guns to appear.
            If set to CONSTANT, orbiting guns will always be active while the base gun is held.
            If set to ON_DAMAGE, orbiting guns will appear after the player takes damage.
            If set to ON_ACTIVE_ITEM, orbiting guns will appear after the player uses their active item.
            If set to ON_DODGE_ROLL, orbiting guns will appear when the player rolls.
            If set to ON_BLANKED, orbiting guns will appear when the player spends a blank.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.TriggerStacking">
            <summary>
            Determines how orbiting guns set to any trigger other than CONSTANT respond to that trigger occurring again while orbital guns are already present.
            If set to IGNORE, nothing will happen.
            If set to RESET, the remaining duration on all orbiting guns will be reset to the value set in the TriggerDuration.
            If set to STACK, the value set in the TriggerDuration will be added to the remaining duration of all orbital guns.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.TriggerDuration">
            <summary>
            If Trigger style is set to any value other than CONSTANT, this float determines how long spawned orbital guns last after being created by the trigger.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedHoveringGunSynergyProcessor.ChanceToConsumeTargetGunAmmo">
            <summary>
            The chance that shots fired from orbital guns will remove ammo from the gun that the orbital is based on.
            Does nothing if the orbital gun's basis is not in the owner's inventory.
            If set to 0, no ammo will be taken.
            </summary>
        </member>
        <member name="T:Alexandria.ItemAPI.AdvancedGunBehavior">
            <summary>
            Advanced version of a GunBehaviour. Still has all methods of a GunBehaviour, but also has some new ones.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.Update">
            <summary>
            Update() is called every tick when the gun is the player's current gun or is dropped.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.InheritData(Gun)">
            <summary>
            Inherits data from another gun. Inherit the variables you want to be saved here!
            </summary>
            <param name="source">The source gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.MidGameSerialize(System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            Saves the data of the gun to a list. Save the variables you want to be saved here!
            </summary>
            <param name="data">The list.</param>
            <param name="dataIndex">DataIndex. You don't need to use this argument.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.MidGameDeserialize(System.Collections.Generic.List{System.Object},System.Int32@)">
            <summary>
            Sets the data of the gun to the contents of a list. Set the variables you want to be saved here!
            </summary>
            <param name="data">The list.</param>
            <param name="dataIndex">DataIndex. Add a number equal to the amount of your data to it.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.Start">
            <summary>
            Start() is called when the gun is created. It's also called when the player picks up or drops the gun.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.NonCurrentGunUpdate">
            <summary>
            NonCurrentGunUpdate() is called every tick EVEN IF THE GUN ISN'T ENABLED. That means it's able to run even if the player's current gun isn't this beh
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnInitializedWithOwner(GameActor)">
            <summary>
            OnInitializedWithOwner() is called when a GunInventory creates a gun to add (for example when the player picks the gun up.) 
            </summary>
            <param name="actor">The gun's owner.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.PostProcessProjectile(Projectile)">
            <summary>
            PostProcessProjectile() is called right after the gun shoots a projectile. If you want to change properties of a projectile in runtime, this is the place to do it.
            </summary>
            <param name="projectile">The target projectile.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.PostProcessVolley(ProjectileVolleyData)">
            <summary>
            PostProcessVolley() is called when PlayerStats rebuilds a gun's volley. It's used by things like VolleyModificationSynergyProcessor to change the gun's volley if the player has a synergy.
            </summary>
            <param name="volley">The target volley.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnDropped">
            <summary>
            OnDropped() is called when an a player drops the gun. gun.CurrentOwner is set to null before this method is even called, so I wouldn't reccomend using it.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAutoReload(PlayerController,Gun)">
            <summary>
            OnAutoReload() is called when a player reloads the gun with an empty clip.
            </summary>
            <param name="player">The player that reloaded the gun. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAutoReloadSafe(PlayerController,Gun)">
            <summary>
            OnAutoReloadSafe() is called when a player reloads the gun with an empty clip and the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadPressed(PlayerController,Gun,System.Boolean)">
            <summary>
            OnReloadPressed() is called when the owner reloads the gun or the player presses the reload key.
            </summary>
            <param name="player">The player that reloaded the gun/pressed the reload key. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
            <param name="manualReload">True if the owner reloaded the gun by pressing the reload key. False if the owner reloaded the gun by firing with an empty clip.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnGunsChanged(Gun,Gun,System.Boolean)">
            <summary>
            OnGunsChanged() is called when the player changes the current gun.
            </summary>
            <param name="previous">The previous current gun.</param>
            <param name="current">The new current gun.</param>
            <param name="newGun">True if the gun was changed because player picked up a new gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnSwitchedToThisGun">
            <summary>
            OnSwitchedToThisGun() when the player switches to this behaviour's affected gun.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnSwitchedAwayFromThisGun">
            <summary>
            OnSwitchedToThisGun() when the player switches away from this behaviour's affected gun.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadPressedSafe(PlayerController,Gun,System.Boolean)">
            <summary>
            OnReloadPressedSafe() is called when the owner reloads the gun or the player presses the reload key and the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun/pressed the reload key. Can't be null.</param>
            <param name="gun">The gun.</param>
            <param name="manualReload">True if the owner reloaded the gun by pressing the reload key. False if the owner reloaded the gun by firing with an empty clip.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReload(PlayerController,Gun)">
            <summary>
            OnReload() is called when the gun is reloaded.
            </summary>
            <param name="player">The player that reloaded the gun. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadEnded(PlayerController,Gun)">
            <summary>
            OnReloadEnded() is called at the end of reload.
            </summary>
            <param name="player">The player that reloaded the gun. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadEndedSafe(PlayerController,Gun)">
            <summary>
            OnReloadEndedSafe() is called at the end of reload and if the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadSafe(PlayerController,Gun)">
            <summary>
            OnReloadSafe() is called when the gun is reloaded and the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnFinishAttack(PlayerController,Gun)">
            <summary>
            OnFinishAttack() is called when the gun finishes firing, for example when the player releases the Shoot key or the gun's clip empties and if the owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostFired(PlayerController,Gun)">
            <summary>
            OnPostFired() is called after the gun fired and if the owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnHeroSwordCooldownStarted(PlayerController,Gun)">
            <summary>
            OnHeroSwordCooldownStarted() when the gun's Sword Slash started and if the gun is a HeroSword (if gun.IsHeroSword = true).
            </summary>
            <param name="player"></param>
            <param name="gun"></param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAmmoChanged(PlayerController,Gun)">
            <summary>
            OnAmmoChanged() is called when the gun's ammo amount increases/decreases.
            </summary>
            <param name="player">The player. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAmmoChangedSafe(PlayerController,Gun)">
            <summary>
            OnAmmoChangedSafe() is called when the gun's ammo amount increases/decreases and if the gun's owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnBurstContinued(PlayerController,Gun)">
            <summary>
            OnBurstContinued() is called when the gun continues a burst (attacks while bursting).
            </summary>
            <param name="player">The player. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnBurstContinuedSafe(PlayerController,Gun)">
            <summary>
            OnBurstContinuedSafe() is called when the gun continues a burst (attacks while bursting) and if the gun's owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.CollectedAmmoPickup(PlayerController,Gun,AmmoPickup)">
            <summary>
            This method is called when the player attempts to interact with an ammo box. If true is returned, the original code to attempt to collect the box will run. If false is returned, the original code for collecting the ammo box will not run (ideal if you want to do something different on ammo pickup, and remove the box manually).
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="self">The gun.</param>
            <param name="pickup">The ammo pickup being interacted with.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPreFireProjectileModifier(Gun,Projectile,ProjectileModule)">
            <summary>
            OnPreFireProjectileModifier() is called before the gun shoots a projectile. If the method returns something that's not the projectile argument, the projectile the gun will shoot will be replaced with the returned projectile.
            </summary>
            <param name="gun">The gun.</param>
            <param name="projectile">Original projectile.</param>
            <param name="mod">Target ProjectileModule.</param>
            <returns>The replacement projectile.</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPickup(GameActor)">
            <summary>
            OnPickup() is called when an actor picks the gun up.
            </summary>
            <param name="owner">The actor that picked up the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostDrop(GameActor)">
            <summary>
            OnPostDrop() is called AFTER the owner drops the gun.
            </summary>
            <param name="owner">The actor that dropped the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPickedUpByPlayer(PlayerController)">
            <summary>
            OnPickup() is called when a player picks the gun up.
            </summary>
            <param name="player">The player that picked up the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostDroppedByPlayer(PlayerController)">
            <summary>
            OnPostDrop() is called AFTER the player drops the gun. If you modify player's stats here, don't forget to call player.stats.RecalculateStats()!
            </summary>
            <param name="player">The player that dropped the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPickedUpByEnemy(AIActor)">
            <summary>
            OnPickup() is called when an enemy picks the gun up.
            </summary>
            <param name="enemy">The enemy that picked up the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostDroppedByEnemy(AIActor)">
            <summary>
            OnPostDrop() is called AFTER the enemy drops the gun.
            </summary>
            <param name="enemy">The enemy that dropped the gun.</param>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.PickedUp">
            <summary>
            Returns true if the gun's current owner isn't null.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.Player">
            <summary>
            If the gun's owner is a player, returns the gun's current owner as a player.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.HeroSwordCooldown">
            <summary>
            Returns the HeroSwordCooldown of the gun if it isn't null. If it's null, returns -1.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.Owner">
            <summary>
            Returns the gun's current owner.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.PickedUpByPlayer">
            <summary>
            Returns true if the gun's owner isn't null and is a player.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.everPickedUpByPlayer">
            <summary>
            Returns true if the gun was ever picked up by a player.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.everPickedUp">
            <summary>
            Returns true if the gun was ever picked up.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.hasReloaded">
            <summary>
            Returns the gun this behaviour is applied to.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.preventNormalFireAudio">
            <summary>
            If true, prevents the gun's normal fire audio.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.preventNormalReloadAudio">
            <summary>
            If true, prevents the gun's normal reload audio.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.overrideNormalFireAudio">
            <summary>
            The gun's override fire audio. Only works if preventNormalFireAudio is true.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.overrideNormalReloadAudio">
            <summary>
            The gun's override reload audio. Only works if preventNormalReloadAudio is true.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.PosIsNearAnyBoneOnBeam(BasicBeamController,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns true if the given position is within the given distance of any of the beam's bones.
            </summary>
            <param name="beam">The beam whose bones should be checked.</param>
            <param name="positionToCheck">The position whose distance is being calculated.</param>
            <param name="distance">The radius within which a bone must be to the position in order to return true.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.GetBoneCount(BasicBeamController)">
            <summary>
            Returns the total number of bones which makes up the given beam.
            </summary>
            <param name="beam">The beam whose bones should be counted.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.GetFinalBoneDirection(BasicBeamController)">
            <summary>
            Returns the angle of the final bone in the beam.
            </summary>
            <param name="beam">The beam to be checked.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.GetIndexedBone(BasicBeamController,System.Int32)">
            <summary>
            Returns the bone at the given index on the beam.        
            </summary>
            <param name="beam">The beam to be checked.</param>
            <param name="boneIndex">The index whose bone should be returned..</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.GetIndexedBonePosition(BasicBeamController,System.Int32)">
            <summary>
            Returns the position of the bone at the given index on the beam. Can be used to get positions at various distances along the beam's length.
            IE: Using GetBoneCount to get the count of all bones, halving it, rounding up, and then getting the position of the bone at that index will get the position halfway along the beam.
            </summary>
            <param name="beam">The beam to be checked.</param>
            <param name="boneIndex">The index whose bone position should be returned..</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.GetBonePosition(BasicBeamController,BasicBeamController.BeamBone)">
            <summary>
            Returns the position of the specified bone on the given beam.
            </summary>
            <param name="beam">The beam to be checked.</param>
            <param name="bone">The bone whose position should be returned.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.GenerateBeamPrefab(Projectile,System.String,UnityEngine.Vector2,UnityEngine.Vector2,System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String},System.Int32,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Collections.Generic.List{System.String},System.Int32,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Collections.Generic.List{System.String},System.Int32,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Single,System.Single)">
            <summary>
            Constructs and returns a prefab for a beam projectile, based off the given regular projectile.
            NOTE THAT ALL BEAM SPRITES MUST BE PERFECTLY SQUARE, AND ALL ANIMATIONS SHOULD HAVE THE SAME DIMENSIONS.
            </summary>
            <param name="projectile">The regular projectile that the beam is based off. Gets the regular projectile's stats and effects by default, where applicable.</param>
            <param name="spritePath">A path to an embedded sprite representing the 'default' state of the beam. Should ideally be the first frame of the midsection animation.</param>
            <param name="colliderDimensions">The X and Y dimensions of the beam's midsection hitbox per-section.</param>
            <param name="colliderOffsets">The X and Y offsets of the beam's midsection hitbox per-section. Offsets are relative to the bottom right.</param>
            <param name="beamAnimationPaths">A list of sprite paths for the beam's midsection animation. Can be any length.</param>
            <param name="beamFPS">The frames per second  of the beam midsection.</param>
            <param name="impactVFXAnimationPaths">A list of sprite paths for the impact VFX. Can be any length. Note, impact is NOT the same as Beam End. Leave null for no impact VFX.</param>
            <param name="beamImpactFPS">The frames per second of the beam's impact VFX.</param>
            <param name="impactVFXColliderDimensions">The X and Y dimensions of the beam's impact VFX collider. Note that the impact vfx cannot actually hit anything, so collider dimensions are largely arbitrary.</param>
            <param name="impactVFXColliderOffsets">The X and Y offsets of the beam's impact VFX collider. As with the dimensions, this is largely arbitrary.</param>
            <param name="endVFXAnimationPaths">A list of sprite paths for the beam's ending animation, which plays as the beam's final segment. Can be any length. If null, will default to a copy of the midsection.</param>
            <param name="beamEndFPS">The frames per second  of the beam ending section.</param>
            <param name="endVFXColliderDimensions">The X and Y dimensions of the beam's ending section hitbox.</param>
            <param name="endVFXColliderOffsets">The X and Y offsets of the beam's ending section hitbox. Offsets are relative to the bottom right.</param>
            <param name="muzzleVFXAnimationPaths">A list of sprite paths for the beam's starting animation, which plays as the beam's first segment. Can be any length. If null, will default to a copy of the midsection.</param>
            <param name="beamMuzzleFPS">The frames per second  of the beam's first segment.</param>
            <param name="muzzleVFXColliderDimensions">The X and Y dimensions of the beam's first section hitbox.</param>
            <param name="muzzleVFXColliderOffsets">The X and Y offsets of the beam's first section hitbox. Offsets are relative to the bottom right.</param>
            <param name="glowAmount">The intensity with which the beam should glow.</param>
            <param name="emissivecolouramt">The intensity of the beam's emissive colour power.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.SetupBeamPart(tk2dSpriteAnimation,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Reflection.Assembly,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},UnityEngine.Vector3[])">
            <summary>
            Used during beam prefab generation to initialise various segments of the beam. ONLY USE IF YOU KNOW WHAT YOU ARE DOING.
            </summary>
            <param name="beamAnimation">The animation to be added to.</param>
            <param name="animSpritePaths">The sprite paths of the segment's animations.</param>
            <param name="animationName">The name of the animation.</param>
            <param name="fps">The frames per second of the segment's animation.</param>
            <param name="assembly">The calling assembly.</param>
            <param name="colliderDimensions">The dimensions of the segment's pixel collider.</param>
            <param name="colliderOffsets">The offsets of the segment's pixel collider. Offsets are calculated from the bottom left.</param>
            <param name="overrideVertices">A set of override colliders, if applicable.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.BeamAPI.FreeFireBeamFromAnywhere(Projectile,PlayerController,UnityEngine.GameObject,UnityEngine.Vector2,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Fires and maintains a beam from the specified object or position for the specified time.
            </summary>
            <param name="projectileToSpawn">The Beam Prefab to be created.</param>
            <param name="owner">The owner of the new beam.</param>
            <param name="otherShooter">If set, rather than being fired from a set position, the beam will be fired from the center of the set gameobject's rigid body, and will update it's position for it's duration..</param>
            <param name="fixedPosition">The position the beam should be spawned at. No effect if otherShooter is set.</param>
            <param name="targetAngle">The initial angle of the beam.</param>
            <param name="duration">How many seconds the beam should fire for.</param>
            <param name="skipChargeTime">If true, the beam will not need to 'charge' before firing, like the Disintegrator.</param>
            <param name="followDirOnProjectile">If true and otherShooter is a projectile, the angle of the beam will be dynamically updated to the projectile's current direction.</param>
            <param name="angleOffsetFromProjectileAngle">If followDirOnProjectile is true, this sets an amount of fixed offset from the projectile's direction in the beam's dynamic angle.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.IsFakePrefab(UnityEngine.Object)">
            <summary>
            Checks if an object is marked as a fake prefab.
            </summary>
            <returns><c>true</c>, if object is in the list of fake prefabs, <c>false</c> otherwise.</returns>
            <param name="o">Unity object to test.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.MarkAsFakePrefab(UnityEngine.GameObject)">
            <summary>
            Marks an object as a fake prefab.
            </summary>
            <param name="obj">GameObject to add to the list.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.Clone(UnityEngine.GameObject)">
            <summary>
            Clones a real prefab or a fake prefab into a new fake prefab.
            </summary>
            <returns>The new game object.</returns>
            <param name="obj">GameObject to clone.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.Instantiate(UnityEngine.Object,UnityEngine.Object)">
            <summary>
            Activates objects that have been created from a fake prefab, otherwise simply returns them.
            </summary>
            <returns>The same Unity object as the one passed in <c>new_o</c>, activated if <c>o</c> is a fake prefab..</returns>
            <param name="o">Original object.</param>
            <param name="new_o">The object instantiated from the original object.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.InstantiateAndFakeprefab(UnityEngine.GameObject)">
            <summary>
            Instantiates a copy of the given gameobject, marks it as a fake prefab, prevents it from being destroyed on load, and sets it as inactive. Returns the copy.
            </summary>
            <param name="target">The gameobject to be instantiated and fakeprefabbed.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.MakeFakePrefab(UnityEngine.GameObject)">
            <summary>
            Marks the given object as a Fake Prefab, prevents it from despawning on load, and sets it as inactive.
            </summary>
            <param name="target">The gameobject to be fakeprefabbed.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefabExtensions.MakeFakePrefab(UnityEngine.GameObject)">
            <summary>
            Marks the given object as a Fake Prefab, prevents it from despawning on load, and sets it as inactive.
            </summary>
            <param name="target">The gameobject to be fakeprefabbed.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefabExtensions.InstantiateAndFakeprefab(UnityEngine.GameObject)">
            <summary>
            Instantiates a copy of the given gameobject, marks it as a fake prefab, prevents it from being destroyed on load, and sets it as inactive. Returns the copy.
            </summary>
            <param name="target">The gameobject to be instantiated and fakeprefabbed.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.GunTools.SetProjectileSpriteRight(Projectile,System.String,System.Int32,System.Int32,System.Boolean,tk2dBaseSprite.Anchor,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},Projectile)">
            <summary>
            Adds a custom sprite to your projectile from your mods sprites/ProjectileCollection folder.
            </summary>
            <param name="proj">Your projectile you'll be adding a sprite to.</param>
            <param name="name">The name of your projectile sprite that you have in the sprites/ProjectileCollection folder. Does not require to have a .png at the end.</param>
            <param name="pixelWidth">The width in pixels your projectile sprite is.</param>
            <param name="pixelHeight">The height in pixels your projectile sprite is.</param>
            <param name="lightened">If true, will make your projectile glow a little.</param>
            <param name="anchor">The projectile sprites anchor point. Usually left as default (LowerLeft) to match most basegame sprite anchor points.</param>
            <param name="overrideColliderPixelWidth">Your override projectile hitbox width. If left as null, uses the projectiles current hitbox width.</param>
            <param name="overrideColliderPixelHeight">Your override projectile hitbox height. If left as null, uses the projectiles current hitbox height.</param>
            <param name="anchorChangesCollider">Honestly not sure but it's left as true by default so leave it as true. I'll update the summary here if someone tells me.</param>
            <param name="fixesScale">Honestly not sure but it's left as true by default so leave it as true. I'll update the summary here if someone tells me.</param>
            <param name="overrideColliderOffsetX">The X offset in pixels that your projectile hitbox is offset by.</param>
            <param name="overrideColliderOffsetY">The Y offset in pixels that your projectile hitbox is offset by.</param>
            <param name="overrideProjectileToCopyFrom">An override to copy projectile data from. Left as null by default.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.GunTools.IsCurrentGun(Gun)">
            <summary>
            Returns true if the gun has an owner, and that owner is currently using it as their active weapon.
            </summary>
            <param name="gun">The gun being checked.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.GunTools.GunPlayerOwner(Gun)">
            <summary>
            Returns the owner of the gun if that owner is a player. If the gun does not have an owner, or that owner is an enemy, returns null.
            </summary>
            <param name="gun">The gun being checked for an owner.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.GunTools.AddTransformSynergy(Gun,System.Int32,System.Boolean,CustomSynergyType,System.Boolean)">
            <summary>
            Adds an additional form to the Gun.
            </summary>
            <param name="gun">The gun being given an additional form.</param>
            <param name="synergyFormeID">The item ID of the additional form. All 'forms' are actually other guns in the EXCLUDED tier, so they have an ID.</param>
            <param name="requiresSynergy">If true, the form will only be available when a set synergy is obtained.</param>
            <param name="requiredSynergy">The enum value of the required synergy. Only matters if 'requiresSynergy' is true. For string-type synergies, there is another extension of the same name that takes a string here instead.</param>
            <param name="overridesDefault">If true, this form will prevent the player from using the default form of the gun. Set true for forced override forms like Blunderbuss 'Blunderbrace', set false for optional swappable forms like AK-47 'Island Forme' or the Megahand's synergies.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.GunTools.AddTransformSynergy(Gun,System.Int32,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds an additional form to the Gun.
            </summary>
            <param name="gun">The gun being given an additional form.</param>
            <param name="synergyFormeID">The item ID of the additional form. All 'forms' are actually other guns in the EXCLUDED tier, so they have an ID.</param>
            <param name="requiresSynergy">If true, the form will only be available when a set synergy is obtained.</param>
            <param name="requiredSynergy">The string identifier of the required synergy. Only matters if 'requiresSynergy' is true. For enum-type synergies, there is another extension of the same name that takes an enum here instead.</param>
            <param name="overridesDefault">If true, this form will prevent the player from using the default form of the gun. Set true for forced override forms like Blunderbuss 'Blunderbrace', set false for optional swappable forms like AK-47 'Island Forme' or the Megahand's synergies.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.GunTools.AddAnimationToProjectile(Projectile,System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{IntVector2},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{tk2dBaseSprite.Anchor},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Nullable{UnityEngine.Vector3}},System.Collections.Generic.List{System.Nullable{IntVector2}},System.Collections.Generic.List{System.Nullable{IntVector2}},System.Collections.Generic.List{Projectile},tk2dSpriteAnimationClip.WrapMode,System.String,System.String)">
            <summary>
            Adds a custom animation to your projectile. Sprites for the animation are taken from the sprites/ProjectileCollection folder
            </summary>
            <param name="proj">Your projectile you'll be adding a sprite to.</param>
            <param name="names">The names of your projectile sprites that you have in the sprites/ProjectileCollection folder for your animation. Does not require to have a .png at the end.</param>
            <param name="fps">The frames per second that your aniamtion plays at.</param>
            <param name="pixelSizes">The sprite sizes of EACH frame in your animation. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="lighteneds">Whether an individual frame will be glowy or not. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="anchors">The anchor of every individual frame. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="anchorsChangeColliders">Whether the anchor of every individual frame affects the current frames colliders. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="fixesScales">No idea. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="manualOffsets">The offset of the sprite on each individial frame. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="overrideColliderPixelSizes">The override collider sizes of the projectile on each individial frame. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="overrideColliderOffsets">The override collider offsets of the projectile on each individial frame. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="overrideProjectilesToCopyFrom">The override projectile too use on each individial frame. You MUST have an equal amount of entries in this list as your frames.</param>
            <param name="wrapMode">Your animations wrap mode. If you just want it to do a looping animation, leave it as Loop. Only useful for when adding multiple differing animations</param>
            <param name="clipName">Your animations clip name. Only useful for when adding multiple differing animations</param>
            <param name="defaultClipName">The default animation your projectile will play, by default. If left as null will use the most recently added clips name as the default.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.Init">
            <summary>
            Initializes hooks and grabs necessary assets for building items
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.LoadShopTables">
            <summary>
            Loads the loot tables of shops for later modification.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.LoadShopTable(System.String)">
            <summary>
            Gets a loot table from shared_auto_001 from name
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.AddSpriteToObject(System.String,System.String,UnityEngine.GameObject,System.Reflection.Assembly)">
            <summary>
            Adds a tk2dSprite component to an object and adds that sprite to the 
            ammonomicon for later use. If obj is null, returns a new GameObject with the sprite
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.AddSpriteToObjectPerpendicular(System.String,System.String,UnityEngine.GameObject,tk2dBaseSprite.PerpendicularState,System.Nullable{System.Int32},System.Reflection.Assembly)">
            <summary>
            Adds a tk2dSprite component to an object and adds that sprite to the ammonomicon for later use. If obj is null, returns a new GameObject with the sprite
            Capable of taking an additional argument for the sprite's perpendicular state. 'Flat' sprites will always lay down on the floor, like carpets.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.SetupItem(PickupObject,System.String,System.String,System.String)">
            <summary>
            Finishes the item setup, adds it to the item databases, adds an encounter trackable 
            blah, blah, blah
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.SetCooldownType(PlayerItem,Alexandria.ItemAPI.ItemBuilder.CooldownType,System.Single)">
            <summary>
            Sets the cooldown type and length of a PlayerItem, and resets all other cooldown types
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.RemovePassiveStatModifier(PickupObject,PlayerStats.StatType)">
            <summary>
            Removes all stat modifiers of the set stat type from a PlayerItem, PassiveItem, or Gun.
            </summary>
             /// <param name="po">A PassiveItem, PlayerItem, or Gun to remove the stat from.</param>
             /// <param name="statType">The stat to be wiped.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.RemovePassiveCustomStatModifier(PickupObject,System.String,System.String)">
            <summary>
            Removes all stat modifiers of the set stat type from a PlayerItem, PassiveItem, or Gun.
            </summary>
             /// <param name="po">A PassiveItem, PlayerItem, or Gun to remove the stat from.</param>
             /// <param name="modPrefix">The prefix of the mod the custom stat is from.</param>
             /// <param name="customStat">The custom stat to be wiped.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.AddPassiveStatModifier(PickupObject,PlayerStats.StatType,System.Single,StatModifier.ModifyMethod)">
            <summary>
            Adds a passive player stat modifier to a PlayerItem, PassiveItem or Gun
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.AddPassiveCustomStatModifier(PickupObject,System.String,System.String,System.Single,StatModifier.ModifyMethod)">
            <summary>
            Adds a passive player stat modifier with a custom stat to a PlayerItem, PassiveItem or Gun
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetTexturesFromDirectory(System.String)">
            <summary>
            Converts all png's in a folder to a list of Texture2D objects
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetTextureFromFile(System.String,System.String)">
            <summary>
            Creates a Texture2D from a file in the sprites directory
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetCollectionFiles">
            <summary>
            Retuns a list of sprite collections in the sprite folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.BytesToTexture(System.Byte[],System.String)">
            <summary>
            Converts a byte array into a Texture2D
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetResourceFolders">
            <summary>
            Returns a list of folders in the ETG resources directory
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.ExtractEmbeddedResource(System.String,System.Reflection.Assembly)">
            <summary>
            Converts an embedded resource to a byte array
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetTextureFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Converts an embedded resource to a Texture2D object
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetResourceNames(System.Reflection.Assembly)">
            <summary>
            Returns a list of the names of all embedded resources
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.SpriteFromFile(System.String,UnityEngine.GameObject)">
            <summary>
            Returns an object with a tk2dSprite component with the 
            texture of a file in the sprites folder
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.SpriteFromResource(System.String,UnityEngine.GameObject,System.Reflection.Assembly)">
            <summary>
            Returns an object with a tk2dSprite component with the 
            texture of an embedded resource
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.SpriteFromTexture(UnityEngine.Texture2D,System.String,UnityEngine.GameObject)">
            <summary>
            Returns an object with a tk2dSprite component with the texture provided
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.AddSpriteToCollection(System.String,tk2dSpriteCollectionData,System.Reflection.Assembly)">
            <summary>
            Adds a sprite (from a resource) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.AddSpriteToCollection(tk2dSpriteDefinition,tk2dSpriteCollectionData)">
            <summary>
            Adds a sprite from a definition to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.AddToAmmonomicon(tk2dSpriteDefinition,System.String)">
            <summary>
            Adds a sprite definition to the Ammonomicon sprite collection
            </summary>
            <returns>The spriteID of the defintion in the ammonomicon collection</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.TrailAPI.AddTrailToProjectile(Projectile,System.String,UnityEngine.Vector2,UnityEngine.Vector2,System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String},System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Adds a tiled trail to the Projectile
            </summary>
            <param name="timeTillAnimStart">If set, once this time is reached, the whole trail will animate and dissipate uniformly, interrupting the progressive cascade.</param>
            <param name="target">The projectile its being added to.</param>
            <param name="spritePath">The sprite path for the first frame of your trail's animation. Used for collider generation.</param>
            <param name="colliderDimensions">The collider dimensions of your trail.</param>
            <param name="colliderOffsets">The offset of your trail from the bottom left corner of your projectile.</param>
            <param name="animPaths">The full list of sprite paths for your trails animation.</param>
            <param name="animFPS">The frames per second of the main trail animation. The longer the animation lasts, the longer the trail will linger.</param>
            <param name="startAnimPaths">The list of sprites for the first segment of the trail, aka the part right next to the gun barrel. Used for 'flaring' trail effects. Can be set to the same list as the regular animation.</param>
            <param name="startAnimFPS">The frames per second of the 'start' animation.</param>
            <param name="cascadeTimer">How quickly the animation will progress between each segment of the trail once it begins to play. Aka: How fast will the trail dissipate.</param>
            <param name="softMaxLength">If the trail length is longer than this value, it will begin to dissipate.</param>
            <param name="destroyOnEmpty">Will it be destroyed if it isnt visible anymore? No idea.</param>
            <param name="emissive">If set to true, the trail will glow.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.InitGenericTagsInternal">
            <summary>
            The setup method which adds tags to basegame items and enemies.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.SetTag(PickupObject,System.String)">
            <summary>
            Adds the specified tag to the PickupObject.
            </summary>
            <param name="item">The item to which the tag should be added.</param>
            <param name="tag">The tag which should be added.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.SetTag(System.Int32,System.String)">
            <summary>
            Adds the specified tag to the PickupObject corresponding to the given ID.
            </summary>
            <param name="id">The ID of the item to which the tag should be added.</param>
            <param name="tag">The tag which should be added.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.HasTag(PickupObject,System.String)">
            <summary>
            Returns true if the PickupObject has the specified tag.
            </summary>
            <param name="item">The item which is being checked for the tag.</param>
            <param name="tag">The tag which is being checked for.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.GetAllItemsIdsWithTag(System.String)">
            <summary>
            Returns a list of all item IDs which have the specified tag.
            </summary>
            <param name="tag">The tag to be searched for.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.GetAllItemsWithTag(System.String)">
            <summary>
            Returns a list of all PickupObjects in the PickupObjectDatabase which have the specified tag.
            </summary>
            <param name="tag">The tag to be searched for.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.SetTag(AIActor,System.String)">
            <summary>
            Adds the specified tag to the AIActor.
            </summary>
            <param name="aiActor">The AIActor to be tagged.</param>
            <param name="tag">The tag to be added.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.SetTag(System.String,System.String)">
            <summary>
            Adds the specified tag to the AIActor with the given GUID.
            </summary>
            <param name="guid">The guid corresponding to the AIActor to be tagged.</param>
            <param name="tag">The tag to be added.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.HasTag(System.String,System.String)">
            <summary>
            Returns true if the AIActor corresponding to the given GUID has the specified tag.
            </summary>
            <param name="guid">The guid corresponding to the AIActor to be checked for the tag.</param>
            <param name="tag">The tag to be checked for.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.HasTag(AIActor,System.String)">
            <summary>
            Returns true if the AIActor has the specified tag.
            </summary>
            <param name="aiActor">The AIActor being checked.</param>
            <param name="tag">The tag to be checked for.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.GetAllEnemyGuidsWithTag(System.String)">
            <summary>
            Returns a list of all enemy guids of AIActors with the specified tag.
            </summary>
            <param name="tag">The tag to be searched for.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.GetAllEnemiesWithTag(System.String)">
            <summary>
            Returns a list of all AIActors in the EnemyDatabase with the specified tag.
            </summary>
            <param name="tag">The tag to be searched for.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AlexandriaTags.HasTags(AIActor,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Returns true if the AIActor has any of the tags in the provided list.
            </summary>
            <param name="aiActor">The AIActor to be checked.</param>
            <param name="tags">The list of tags to be checked for.</param>
            <param name="reqAll">If true, the AIActor must have ALL specified tags to return true. If false, the AIActor must only have one.</param>
        </member>
        <member name="M:Alexandria.Misc.CustomAmmoDisplayExtensions.VanillaAmmoDisplay(PlayerController)">
            <summary>Helper function to print out vanilla ammo display for a player</summary>
        </member>
        <member name="T:Alexandria.Misc.EasyLight">
            <summary>Helper class for adding nice looking lights to Guns, Projectiles, and other GameObjects.</summary>
        </member>
        <member name="P:Alexandria.Misc.EasyLight.IsOn">
            <summary>Whether the light is current on or not. May still be invisible if its parent is deactivated.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.Toggle">
            <summary>Turns the light on if off, and turns it off if on.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.TurnOn">
            <summary>Turns the light on.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.TurnOff(System.Boolean)">
            <summary>Turns the light off, optionally skipping its fade out animation.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.SetBrightness(System.Single)">
            <summary>Sets the brightness of a light.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.SetRadius(System.Single)">
            <summary>Sets how far the light extends from its origin point.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.SetConeWidth(System.Single)">
            <summary>Sets the angle spanned by cone lights.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.SetColor(UnityEngine.Color)">
            <summary>Sets the color of the light.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.TrackObject(UnityEngine.GameObject)">
            <summary>For cone lights, automatically tracks the specified GameObject's transform.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.PointInDirection(System.Single)">
            <summary>For cone lights, points the light in the direction specified by angle.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.PointAt(UnityEngine.Vector2)">
            <summary>For cone lights, points the light towards the specified position.</summary>
        </member>
        <member name="M:Alexandria.Misc.EasyLight.Create(System.Nullable{UnityEngine.Vector2},UnityEngine.Transform,System.Nullable{UnityEngine.Color},System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>Creates an Easy Light at the specified positinon and / or parented to the specified object</summary>
            <param name="pos">Where to place the light. Can be ignored if parent is non-null. Must be set if parent is null.</param>
            <param name="parent">The transform to parent the light to. If null, the light cannot be moved from its initial position.</param>
            <param name="color">The color of the light. Can be changed later using SetColor().</param>
            <param name="maxLifeTime">If greater than zero, determines the amount of time before the light is destroyed.</param>
            <param name="radius">How far the light radiates from its origin point.</param>
            <param name="growIn">If true, the light will grow to its radius when fading in and shrink to nothingness when fading out.</param>
            <param name="brightness">The brightness of the light. Setting to anything lower than 3.5f can have strange effects. Can be changed later using SetBrightness().</param>
            <param name="fadeInTime">If greater than 0, determines how long the light takes to reach its max brightness when turned on.</param>
            <param name="fadeOutTime">If greater than 0, determines how long the light takes to reach zero brightness when turned off.</param>
            <param name="destroyWithParent">(MIGHT NOT WORK) If true, the light is destroyed when its parent is destroyed. If false, the light persists after its parent is destroyed.</param>
            <param name="useCone">If true, the light will be emitted in a cone instead of in all directions.</param>
            <param name="coneWidth">If useCone is true, determines the angle spanned by the cone of light. Can be changed later using SetConeWidth().</param>
            <param name="coneDirection">If useCone is true, determines the angle the cone of light is pointed at. Can be changed later using PointInDirection() or PointAt().</param>
            <param name="rotateWithParent">If true, if useCone is true, and if parented to a Gun / Projectile, automatically points the cone in the direction of the gun barrel / projectile respectively.</param>
            <param name="turnOnImmediately">If true, the light is turned on immediately when created. If false, the light must be turned on manually with Toggle() or TurnOn().</param>
        </member>
        <member name="M:Alexandria.Misc.EasyLightExtensions.AddLight(Gun,System.Single,System.Nullable{UnityEngine.Color},System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.Boolean)">
            <summary>Attaches an EasyLight to a gun.</summary>
            <param name="brightness">The brightness of the light. Setting to anything lower than 3.5f can have strange effects. Can be changed later using SetBrightness().</param>
            <param name="color">The color of the light. Can be changed later using SetColor().</param>
            <param name="useCone">If true, the light will be emitted in a cone instead of in all directions.</param>
            <param name="turnOnImmediately">If true, the light is turned on immediately when created. If false, the light must be turned on manually with Toggle() or TurnOn().</param>
            <param name="fadeInTime">If greater than 0, determines how long the light takes to reach its max brightness when turned on.</param>
            <param name="fadeOutTime">If greater than 0, determines how long the light takes to reach zero brightness when turned off.</param>
            <param name="coneWidth">If useCone is true, determines the angle spanned by the cone of light. Can be changed later using SetConeWidth().</param>
            <param name="rotateWithParent">If true, if useCone is true, and if parented to a Gun / Projectile, automatically points the cone in the direction of the gun barrel / projectile respectively.</param>
            <param name="radius">How far the light radiates from its origin point.</param>
            <param name="growIn">If true, the light will grow to its radius when fading in and shrink to nothingness when fading out.</param>
        </member>
        <member name="M:Alexandria.Misc.EasyLightExtensions.AddLight(Projectile,System.Single,System.Nullable{UnityEngine.Color},System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.Boolean)">
            <summary>Attaches an EasyLight to a projectile.</summary>
            <param name="brightness">The brightness of the light. Setting to anything lower than 3.5f can have strange effects. Can be changed later using SetBrightness().</param>
            <param name="color">The color of the light. Can be changed later using SetColor().</param>
            <param name="useCone">If true, the light will be emitted in a cone instead of in all directions.</param>
            <param name="turnOnImmediately">If true, the light is turned on immediately when created. If false, the light must be turned on manually with Toggle() or TurnOn().</param>
            <param name="fadeInTime">If greater than 0, determines how long the light takes to reach its max brightness when turned on.</param>
            <param name="fadeOutTime">If greater than 0, determines how long the light takes to reach zero brightness when turned off.</param>
            <param name="coneWidth">If useCone is true, determines the angle spanned by the cone of light. Can be changed later using SetConeWidth().</param>
            <param name="rotateWithParent">If true, if useCone is true, and if parented to a Gun / Projectile, automatically points the cone in the direction of the gun barrel / projectile respectively.</param>
            <param name="radius">How far the light radiates from its origin point.</param>
            <param name="growIn">If true, the light will grow to its radius when fading in and shrink to nothingness when fading out.</param>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnRunStart">
            <summary>
            Runs whenever the player begins a new run. Triggers in all gamemodes, including shortcuts and bossrush.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.PostDungeonTrueStart">
            <summary>
            Runs whenever a new Dungeon instance is created, but BEFORE it is built. Used to modify aspects of Dungeon so they get applied on generation.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnNewPlayercontrollerSpawned">
            <summary>
            Runs whenever a new PlayerController is created.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnRewardPedestalSpawned">
            <summary>
            Runs whenever a new Reward Pedestal (IE: The pedestals created by bosses) is spawned.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnShrineUsed">
            <summary>
            Runs whenever a shrine of the type AdvancedShrineController is used. Pending improvement.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnShopItemStarted">
            <summary>
            Runs whenever a new ShopItemController is created.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnRatMazeFailed">
            <summary>
            Runs whenever a player fails in the Rat Maze, taking a wrong turn.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnMinorBreakableShattered">
            <summary>
            Runs when a minorbreakable is shattered.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnRewardPedestalDetermineContents">
            <summary>
            Runs just before a reward pedestal determines it's contents. 
            Can be used to modify the contents by adding to the 'overrideItemPool' list in 'ValidPedestalContents'.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnChestPostSpawn">
            <summary>
            Runs when a new chest spawns. With room-reward chests, runs just after the chest has settled itself on the ground.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnChestPreOpen">
            <summary>
            Runs between the player interacting with a chest, and the chest opening.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnChestBroken">
            <summary>
            Runs whenever a chest is broken.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyHealthHaverDie">
            <summary>
            Runs whenever any HealthHaver is killed.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyPlayerCollectedAmmo">
            <summary>
            Runs whenever any PlayerController collects an ammo box.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyPlayerCollectedKey">
            <summary>
            Runs whenever any player collects a key pickup. Note that Rat Keys count as keys.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyPlayerCollectedHealth">
            <summary>
            Runs whenever any player collects an HP pickup. Note that Armor pickups count as HP.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyPlayerNudgedHealth">
            <summary>
            Runs whenever any player touches an HP Pickup. Occurs before pickup, and will still run even if the player's HP is full and they are unable to collect the pickup.
            Note that armor counts as an HP pickup.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyPlayerCollectedBlank">
            <summary>
            Runs whenever any player collects a blank.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyPlayerCollectedPickup">
            <summary>
            (DOES NOT WORK) Runs whenever any player collects any kind of Pickup Object. Runs AFTER pickup, so be aware of that.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnAnyPlayerDroppedPassiveItem">
            <summary>
            Runs whenever any player drops a passive item.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnBossKilled">
            <summary>
            Runs whenever any Boss HealthHaver is killed.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnExplosionComplex">
            <summary>
            Runs whenever an explosion occurs. Contains more information about the explosion than the vanilla action.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnLOTJSpawned">
            <summary>
            Runs when the Lord of the Jammed spawns.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.OnPostProcessItemSpawn">
            <summary>
            Runs when a loot item spawned by the Loot Engine becomes grounded and registered.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.CustomActions.ValidPedestalContents.overrideItemPool">
            <summary>
            A list of tuples which will be converted into an override loot pool for the pedestal if set. 
            The first value is an integer, and represents an item id, while the second is a float an represents the weight.
            </summary>
        </member>
        <member name="M:Alexandria.Misc.EasyEnumExtender.ExtendEnumsInAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            In each class with the [EnumExtension(enumType)] attribute sets each public and static field to a new value of the given enum, named after the field.
            </summary>
            <param name="guid">The guid of your mod.</param>
            <param name="asmbl">The assembly, the classes of which will be affected. If null, defaults to the assembly that called this method.</param>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.PreProcessSlash">
            <summary>
            Runs just before a melee slash belonging to the attached player occurs, containing information about the slash and facilitating modification.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.PostProcessSlash">
            <summary>
            Runs after a melee slash belonging to the attached player occurs.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnSlashHitEnemy">
            <summary>
            Runs when an AIActor is hit by a melee slash belonging to the attached player. Ideal for transferring bullet effects.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnPickedUpAmmo">
            <summary>
            Runs whenever the attached player collects an ammo box.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnPickedUpKey">
            <summary>
            Runs whenever the attached player collects a key pickup. Note, Rat Keys count as Keys.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnPickedUpHP">
            <summary>
            Runs whenever the attached player collects HP. Note, Armor is counted as HP.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnNudgedHP">
            <summary>
            Runs whenever the attached player touches HP. Occurs before pickup, and will still run if the player nudges a heart pickup at full HP.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnPickedUpBlank">
            <summary>
            Runs whenever the attached player collects a blank.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnDroppedPassiveItem">
            <summary>
            Runs whenever the attached player drops a passive item.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnCompanionSpawnedBullet">
            <summary>
            Runs whenever a companion belonging to the attached player spawns a projectile.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnCompanionStatsQueried">
            <summary>
            Runs whenever a QueryCompanionStats is called. Useful for modifying companion stats not accessible via OnCompanionSpawnedBullet.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnBlessedGunChanged">
            <summary>
            Runs whenever the player's gun changes in Blessed Mode.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnActiveItemPreDrop">
            <summary>
            Runs just before the attached player drops their active item, for any reason.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnBlankModificationItemProcessed">
            <summary>
            Runs whenever a BlankModificationItem belonging to the attached player is processed after a blank.
            </summary>
        </member>
        <member name="F:Alexandria.Misc.ExtendedPlayerComponent.OnNewOrbitalInitialised">
            <summary>
            Runs whenever a PlayerOrbital belonging to the attached player is initialised.
            </summary>
        </member>
        <member name="M:Alexandria.Misc.ExtendedPlayerComponent.Enrage(System.Single,System.Boolean)">
            <summary>
            Triggers a rage effect (like the Enraging Photo) for the specified duration. Rage gives double damage, and comes with associated visual effects.
            </summary>
            <param name="dur">The length of the desired rage.</param>
            <param name="resetExisting">If true, the given rage duration will override the duration of existing rage (if the player is already enraged) instead of adding to it. Can be used to cancel rage by setting duration to zero.</param>
        </member>
        <member name="M:Alexandria.Misc.ExtendedPlayerComponent.TriggerInvulnerableFrames(System.Single,System.Boolean)">
            <summary>
            Triggers blinking invulnerability frames for the specified duration. Does not trigger if the player is already invulnerable from basegame I-frames.
            </summary>
            <param name="incorporealityTime">The length of the desired invulnerability.</param>
            <param name="resetExisting">If true, the given incorporeality duration will override the duration of existing incorporeality (if the player is already invulnerable) instead of adding to it. Can be used to cancel I-frames by setting duration to zero.</param>
        </member>
        <member name="M:Alexandria.Misc.GameManagerUtility.GetPlayerWithItemID(GameManager,System.Int32,System.Boolean)">
            <summary>
            Returns the playercontroller with the specified item ID, if there is one. Returns null if no players have the item ID.
            </summary>
            <param name="managerInstance">The instance Gamemanager.</param>
            <param name="id">The item ID being searched for.</param>
            <param name="randomIfBoth">If true, and BOTH players have the specified item, the returned player will be random. If false in the same situation of both players having the item, prioritises the Primary Player.</param>
        </member>
        <member name="M:Alexandria.Misc.GameManagerUtility.AnyPlayerHasActiveSynergy(GameManager,System.String)">
            <summary>
            Returns true if the Primary Player OR the Secondary Player have the specified synergy. Does not check the secondary player if the secondary player does not exist.
            </summary>
            <param name="managerInstance">The instance Gamemanager.</param>
            <param name="synergyID">The synergy name string to check for.</param>        
        </member>
        <member name="M:Alexandria.Misc.GameManagerUtility.AnyPlayerHasPickupID(GameManager,System.Int32)">
            <summary>
            Returns true if the Primary Player OR the Secondary Player have the specified item ID in their inventory. Does not check the secondary player if the secondary player does not exist.
            </summary>
            <param name="managerInstance">The instance Gamemanager.</param>
            <param name="itemID">The item ID to check for.</param>        
        </member>
        <member name="M:Alexandria.Misc.GameManagerUtility.GetCombinedPlayersStatAmount(GameManager,PlayerStats.StatType)">
            <summary>
            Returns the total stat value of the specified stat shared between both players. Does not check players that do not exist.
            </summary>
            <param name="managerInstance">The instance Gamemanager.</param>
            <param name="stat">The specified stat to return the combined total of.</param>        
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.RemoveItemFromInventory(PlayerController,PickupObject)">
            <summary>
            Removes the given pickupobject from the player's inventory if it is present in the player's inventory. Works on passives, actives, and guns.
            </summary>
            <param name="player">The target player.</param>
            <param name="item">The item or gun to be removed.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.IsStarterItem(PlayerController,System.Int32)">
            <summary>
            Returns true if the given ID corresponds to one of the target player's starting items.
            </summary>
            <param name="player">The target player.</param>
            <param name="id">The item ID being checked.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.GetNumberOfItemInInventory(PlayerController,System.Int32)">
            <summary>
            Returns an integer value corresponding to the number of copies of a given passive or active item present in the player's inventory. 
            </summary>
            <param name="player">The target player.</param>
            <param name="itemID">The item ID being counted.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.RemovePassiveItemAtIndex(PlayerController,System.Int32)">
            <summary>
            Removes the item at the given index in the target player's inventory.
            </summary>
            <param name="player">The target player.</param>
            <param name="index">The index at which the item should be removed.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.GetExtComp(PlayerController)">
            <summary>
            Returns the ExtendedPlayerComponent present on the specified player. Returns null if the ExtendedPlayerComponent is not present, however this should never happen.
            </summary>
            <param name="owner">The target player.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.PositionInDistanceFromAimDir(PlayerController,System.Single)">
            <summary>
            Returns a Vector2 position corresponding to the specified distance from the player in the direction they are currently aiming.
            </summary>
            <param name="player">The target player.</param>
            <param name="distance">The distance from the player that the returned position ought to be.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.GetCursorPosition(PlayerController,System.Single)">
            <summary>
            Returns the position of the target player's cursor. Returned Vector2 is nullable, and will be null if the target player is using a controller.
            </summary>
            <param name="user">The target player.</param>
            <param name="fallbackAimDirDistance">If the player does not have a cursor, and fallbackAimDirDistance is greater than zero, returns a position the specified distance in the direction being aimed.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.NextHitWillKillPlayer(PlayerController,System.Single)">
            <summary>
            Returns true if the specified damage amount will kill the target player. Rudimentary, use with caution.
            </summary>
            <param name="player">The target player.</param>
            <param name="damageAmount">The damage amount to be checked against the player's current HP.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.GiveAmmoToGunNotInHand(PlayerController,System.Int32,System.Int32)">
            <summary>
            Gives the specified amount of ammo to the gun in the target player's inventory with the specified ID. Does nothing if the gun corresponding to the ID is not in the player's inventory.
            </summary>
            <param name="player">The target player.</param>
            <param name="idToGive">The target gun ID to restore ammo to.</param>
            <param name="AmmoToGive">The amount of ammo to restore.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.RecalculateOrbitals(PlayerController)">
            <summary>
            Recalculates the orbital tier and orbital index of the specified player's orbitals. Can resolve issues arising from spawning, deleting, or altering orbitals.
            </summary>
            <param name="player">The target player.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.TriggerInvulnerableFrames(PlayerController,System.Single)">
            <summary>
            Shorthand extension to trigger the invulnerability frame function of the ExtendedPlayerComponent.
            </summary>
            <param name="player">The target player.</param>
            <param name="incorporealityTime">How long the invulnerability frames should last.</param>
        </member>
        <member name="M:Alexandria.Misc.PlayerUtility.DoEasyBlank(PlayerController,UnityEngine.Vector2,Alexandria.Misc.EasyBlankType)">
            <summary>
            Simple shorthand to trigger a blank effect belonging to the target player at a specified position.
            </summary>
            <param name="blankOwner">The target player, who the blank effect belongs to.</param>
            <param name="blankPosition">The position of the blank effect.</param>
            <param name="type">The 'type' of blank. Set to FULL for a full room blank, or MINI for a microblank, like the effect of Blank Bullets.</param>
        </member>
        <member name="M:Alexandria.Misc.RuntimeRoomhandlerUtility.GetXEnemiesInRoom(Dungeonator.RoomHandler,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a specified number of unique enemies in the target room. Returns a list of AIActors.
            </summary>
            <param name="room">The target room.</param>
            <param name="numOfEnemiesToReturn">How many enemies the returned list should contain. May return fewer than the specified amount if there are not enough valid enemies in the room.</param>
            <param name="reqForRoomClear">If true, will only return enemies which are required for room clear.</param>
            <param name="canReturnBosses">If false, returned list of AIActors cannot contain bosses.</param>
        </member>
        <member name="M:Alexandria.Misc.RuntimeRoomhandlerUtility.RoomContainsMineFlayer(Dungeonator.RoomHandler)">
            <summary>
            Returns true if the target room contains the Mine Flayer boss, or another AIActor (such as a bell) who is 'secretly' the Mine Flayer.
            </summary>
            <param name="room">The target room.</param>
        </member>
        <member name="M:Alexandria.Misc.ShadowBulletDoer.SpawnChainedShadowBullets(Projectile,System.Int32,System.Single,System.Single,Projectile,System.Boolean)">
            <summary>
            Spawns a chain of Shadow Bullets style 'shadow' projectiles behind the original bullet. 
            </summary>
            <param name="source">The target projectile.</param>
            <param name="numberInChain">How many shadow bullets should be spawned.</param>
            <param name="pauseLength">How long the pause should be between each shadow bullet in the chain spawning.</param>
            <param name="chainScaleMult">A scale multiplier automatically applied to the spawned clones.</param>
            <param name="overrideProj">If set, the shadow bullet chain will be made up of copies of the override projectile instead of the original projectile.</param>
            <param name="shadowcolour">If true, applies the shadowy colouration from the Shadow Bullets item to the clones.</param>
        </member>
        <member name="M:Alexandria.Misc.ShadowBulletDoer.SpawnShadowBullet(Projectile,UnityEngine.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a duplicate 'shadow' bullet with the same parameters as the original at a set position and with a set rotation. Returns the spawned clone for additional modification.
            </summary>
            <param name="obj">The target projectile.</param>
            <param name="position">The position that the 'shadow' bullet should be spawned at.</param>
            <param name="rotation">The rotation of the 'shadow' bullet. Used to determine angle. 0 is equivalent to directly to the right.</param>
            <param name="chainScaleMult">A scale multiplier automatically applied to the spawned clone.</param>
            <param name="shadowcolour">If true, applies the shadowy colouration from the Shadow Bullets item to the clone.</param>
        </member>
        <member name="M:Alexandria.Misc.SupplyDropDoer.SpawnSupplyDrop(UnityEngine.Vector2,System.Int32,System.Single,System.Boolean)">
            <summary>
            Spawns a falling crate (like the Supply Drop item) at the specified position. Returns the spawned crate's crate behaviour. Returned behaviour contains an OnCrateLanded action for custom effects.
            </summary>
            <param name="position">The position the crate should be spawned at.</param>
            <param name="lootIDToSpawn">An item or gun ID to be dropped by the crate. Leave as -1 for no item.</param>
            <param name="crateDespawnDelay">How long after opening should the crate wait to despawn. If left as -1, the crate will despawn when the spawned loot is collected (if the loot spawn ID was set).</param>
            <param name="preventAutoDespawn">If true, prevents the crate from despawning automatically. Call RemoveCrate() to remove manually.</param>
        </member>
        <member name="M:Alexandria.Misc.SupplyDropDoer.SimplerCrateBehaviour.RemoveCrate">
            <summary>
            Causes the crate to play it's despawn animation, and disappear.
            </summary>
        </member>
        <member name="M:Alexandria.Misc.SupplyDropDoer.SimplerCrateBehaviour.ClearLandingTarget">
            <summary>
            Removes the crate's landing target VFX, if one is present.
            </summary>
        </member>
        <member name="M:Alexandria.Misc.Tk2dSpriteAnimatorUtility.AddEventTriggersToAnimation(tk2dSpriteAnimator,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Adds an event trigger to specific frames in an animation. 
            </summary>
            <param name="animator">The target tk2dSpriteAnimator.</param>
            <param name="animationName">The name of the aniamtion you want to affect.</param>
            <param name="frameAndEventName">A dictionary containing the frames and the event name you want to trigger at that frame. Ex: { 0, "sparkle" }, will trigger the event 'sparkle' on the first frame of the animation </param>
        </member>
        <member name="M:Alexandria.Misc.Tk2dSpriteAnimatorUtility.AddOffsetToFrames(tk2dSpriteAnimator,System.String,System.Collections.Generic.Dictionary{System.Int32,UnityEngine.Vector3},System.Collections.Generic.List{System.Int32})">
            <summary>
            Offsets specific frames positions in an animation. Be wary to NOT use this on the same frames AND aniamtions multiple times!
            </summary>
            <param name="animator">The target tk2dSpriteAnimator.</param>
            <param name="animationName">The name of the aniamtion you want to affect.</param>
            <param name="Offset">A dictionary containing the frames and the offset you want to apply to that frame. Ex: { 0, new Vector3(0.25f, 0.25f) }, will ofsset the frame by 4 pixels up and 4 pixels right on the first frame of the animation </param>
            <param name="idListfallback">Can be left as null. Used to store ids between uses to make sure not to offset these frames on accident.</param>
        </member>
        <member name="M:Alexandria.Misc.Tk2dSpriteAnimatorUtility.AddSoundsToAnimationFrame(tk2dSpriteAnimator,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Adds triggers to specific frames in an animation to play sounds. 
            </summary>
            <param name="animator">The target tk2dSpriteAnimator.</param>
            <param name="animationName">The name of the aniamtion you want to affect.</param>
            <param name="frameAndSoundName">A dictionary containing the frames and the sound name you want to trigger at that frame. Ex: { 0, "Play_ENM_hammer_target_01" }, will play the sound 'Play_ENM_hammer_target_01' on the first frame of the animation </param>
        </member>
        <member name="M:Alexandria.Misc.Tk2dSpriteAnimatorUtility.MarkAnimationAsSpawn(tk2dSpriteAnimator,System.String)">
            <summary>
            Marks all frames in an animation as spawning frames. Probably only used for enemies. 
            </summary>
            <param name="animator">The target tk2dSpriteAnimator.</param>
            <param name="animationName">The name of the aniamtion you want to affect.</param>
        </member>
        <member name="M:Alexandria.Misc.Tk2dSpriteAnimatorUtility.AddInvulnverabilityFramesToAnimation(tk2dSpriteAnimator,System.String,System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            Marks specific frames in an animation to make the enemy invulnerable to damage on those frames. 
            </summary>
            <param name="animator">The target tk2dSpriteAnimator.</param>
            <param name="animationName">The name of the aniamtion you want to affect.</param>
            <param name="frameAndBool">A dictionary containing the frames and a true/false for whether it'll be invulnerable on that frame. (Default is false) Ex: { 0, true }, will make the enemy invulnerable on the first frame of the animation </param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.ProjectilePlayerOwner(Projectile)">
            <summary>
            Fetches the PlayerController of the player who owns the projectile. If the projectile is not owned by a player, returns null.
            </summary>
            <param name="bullet">The target projectile</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.InstantiateAndFireTowardsPosition(Projectile,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,PlayerController)">
            <summary>
            Instantiates a projectile and fires it in the direction of a given Vector2 position. Returns the instantiated projectile for further modification.
            </summary>
            <param name="projectile">The projectile prefab to be instantiated.</param>
            <param name="startingPosition">The position the projectile should be spawned at.</param>
            <param name="targetPosition">The target position that the projectile should be fired towards.</param>
            <param name="angleOffset">The amount of degrees that the projectile's trajectory should be offset by. For example, '45' will cause the projectile to be fired 45 degrees to the left of the target. Leave 0 for a direct shot.</param>
            <param name="angleVariance">The amount of degrees the projectile's angle can vary from the final angle. Essentially accuracy/spread.</param>
            <param name="playerToScaleAccuracyOff">If set to a player controller, that player's accuracy stat will affect the angle variance of the instantiated projectile.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.InstantiateAndFireInDirection(Projectile,UnityEngine.Vector2,System.Single,System.Single,PlayerController)">
            <summary>
            Instantiates a projectile and fires it along a given angle. Returns the instantiated projectile for further modification.
            </summary>
            <param name="projectile">The projectile prefab to be instantiated.</param>
            <param name="startingPosition">The position the projectile should be spawned at.</param>
            <param name="angle">The angle the projectile should be fired. 0 corresponds with directly to the right. 180 corresponds with directly to the left.</param>
            <param name="angleVariance">The amount of degrees the projectile's angle can vary from the given angle. Essentially accuracy/spread.</param>
            <param name="playerToScaleAccuracyOff">If set to a player controller, that player's accuracy stat will affect the angle variance of the instantiated projectile.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.GetAbsoluteRoom(Projectile)">
            <summary>
            Returns the RoomHandler of the room that the projectile is inside.
            </summary>
            <param name="bullet">The target projectile.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.SendInRandomDirection(Projectile)">
            <summary>
            Sends the bullet flying in a random direction.
            </summary>
            <param name="bullet">The target projectile.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.GetVectorToNearestEnemy(Projectile,System.Boolean,Dungeonator.RoomHandler.ActiveEnemyType,System.Collections.Generic.List{AIActor},System.Func{AIActor,System.Boolean})">
            <summary>
            Returns a vector corresponding to the direction of the nearest enemy to the projectile's position. Returns Vector2.zero if the Projectile is null
            </summary>
            <param name="bullet">The target projectile</param>
            <param name="checkIsWorthShooting">If true, the projectile will ignore enemies with IsWorthShootingAt set to false, such as Mountain Cubes.</param>
            <param name="type">Determines whether or not the projectile should take into account if an enemy needs to be killed for room clear.</param>
            <param name="overrideValidityCheck">A function which allows for the setting of custom parameters for whether or not an enemy is valid.</param>
            <param name="excludedActors">Enemies that are in this list will not be taken into account.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.ReflectBullet(Projectile,System.Boolean,GameActor,System.Single,System.Boolean,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Changes the trajectory of the targeted projectile and assigns it a new owner, 'reflecting' it as with the effect of Rolling Eye.
            </summary>
            <param name="p">The target projectile</param>
            <param name="retargetReflectedBullet">If true, the reflected bullet will be automatically sent back in the direction of it's previous owner.</param>
            <param name="newOwner">The intended new owner of the projectile. Can be a player or an enemy.</param>
            <param name="minReflectedBulletSpeed">The minimum speed of the projectile once it is reflected. If it's current speed is less than the minimum, it will be accelerated to the minimum.</param>
            <param name="doPostProcessing">If true, and the newOwner is a player, the reflected bullet will scale with the new owner's stats and will be post processed by their items.</param>
            <param name="scaleModifier">A scale multiplier which will be applied to the projectile as it is reflected.</param>
            <param name="baseDamage">The damage that the reflected projectile should deal.</param>
            <param name="spread">How many degrees the projectile's trajectory can vary by if it is retargeted towards it's previous owner.</param>
            <param name="sfx">A sound effect which is played when the projectile is reflected.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.SetupProjectile(System.Int32)">
            <summary>
            Automatically instantiates and fakeprefabs the first projectile of the default module of the given gun ID and returns the new fake prefab.
            </summary>
            <param name="id">The gun ID whose first, default projectile you wish to return a clone of</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.InstantiateAndFakeprefab(Projectile)">
            <summary>
            Automatically instantiates and fakeprefabs the given projectile and returns the new fake prefab.
            </summary>
            <param name="projToCopy">The original projectile which you intend to return a clone of</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.ApplyClonedShaderProjModifier(Projectile,ShaderProjModifier)">
            <summary>
            Clones an existing ShadeProjModifier and applies it to the target projectile. ShadeProjModifiers are visual effects like that of the Tangler.
            </summary>
            <param name="self">The target projectile</param>
            <param name="shaderToClone">The original ShaderProjModifier which you intend to clone onto the target.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.RemoveFromPool(Projectile)">
            <summary>
            Prevents the bullet from pooling and being recycled by enemies. Use on enemy bullets that you apply strange effects to.
            </summary>
            <param name="proj">The target projectile.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.ConvertToHelixMotion(Projectile,System.Boolean)">
            <summary>
            Easily converts a bullet to the Helix Bullets projectile motion, including compensating for the presence of orbital bullets.
            </summary>
            <param name="bullet">The target projectile.</param>
            <param name="isInverted">Whether or not the helix motion should go left or right to start off.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.ApplyCompanionModifierToBullet(Projectile,PlayerController)">
            <summary>
            Applies companion modifiers easily to a target projectile. By default includes the multipliers from Battle Standard and the Lute.
            </summary>
            <param name="bullet">The target projectile</param>
            <param name="owner">The player whose companion modifiers should be taken into account.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.GetFullListOfStatusEffects(Projectile,System.Boolean)">
            <summary>
            Conglomerates all status effects that a projectile will apply into a single list.
            </summary>
            <param name="bullet">The target projectile</param>
            <param name="ignoresProbability">If false, the method will only return a status effect if a random value is equal or less than it's chance to apply. If true, it will ignore the status effect's chance to apply and return it regardless.</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.ReturnRealDamageWithModifiers(Projectile,HealthHaver)">
            <summary>
            Approximates the damage that the projectile would apply to a given target, applying both boss damage multipliers and jammed damage multipliers. General shorthand.
            </summary>
            <param name="bullet">Target projectile</param>
            <param name="target">The enemy whom the potential damage against is being calculated</param>
        </member>
        <member name="M:Alexandria.Misc.ProjectileUtility.AssignToPlayer(Projectile,PlayerController,System.Boolean)">
            <summary>
            Makes the target projectile the property of the given player, and scales the projectile's stats off of that player's stats.
            </summary>
            <param name="bullet">Target projectile</param>
            <param name="player">The player the bullet will be assigned to.</param>
            <param name="postProcess">Whether or not to automatically postprocess the given projectile.</param>
        </member>
        <member name="M:Alexandria.Misc.VolleyRebuildHelpers.RecalculateStatsWithoutRebuildingGunVolleys(PlayerStats,PlayerController)">
            <summary>Prevent gun volleys from being rebuilt when recalculating the players' stats</summary>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsObject``1(System.String,System.String)">
            <summary>
            Get the value of a key as an object in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as an object.</returns>
            <typeparam name="T">The type of object you are getting.</typeparam>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValue(System.String,System.String)">
            <summary>
            Get the value of a key as a string in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as a string.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsInt(System.String,System.String)">
            <summary>
            Get the value of a key as an integer in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as an integer.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsFloat(System.String,System.String)">
            <summary>
            Get the value of a key as a float in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as a float.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsBoolean(System.String,System.String)">
            <summary>
            Get the value of a key as a boolean in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as a boolean.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.SetValueAsObject``1(System.String,System.String,``0)">
            <summary>
            Set the value of a key as an object in the save data,
            It's recommended to not save an object that implements Unity's Object class as it can cause a infinite recursion and crash the game.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to set the value of.</param>
            <param name="value">The object value to set.</param>
            <typeparam name="T">The type of object you are setting.</typeparam>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.SetValue(System.String,System.String,System.Object)">
            <summary>
            Set the value of a key in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to set the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.CreateLootTable(System.Collections.Generic.List{GenericLootTable},DungeonPrerequisite[])">
            <summary>
            Creates a new blank loot table
            </summary>
            <param name="includedLootTables">i think this litterally dose fuck all</param> 
            <param name="prerequisites">the prerequisites of the loot table... whatever the fuck that means</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.AddItemToPool(GenericLootTable,PickupObject,System.Single)">
            <summary>
            Adds an item to a loot table via PickupObject
            </summary>
            <param name="lootTable">The loot table you want to add to</param> 
            <param name="po">The PickupObject you're adding</param>
            <param name="weight">The Weight of the item you're adding (default is 1)</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.AddItemsToPool(GenericLootTable,System.Int32[])">
            <summary>
            Adds an item to a loot table via PickupObject (Will keep weight at 1)
            </summary>
            <param name="lootTable">The loot table you want to add to</param> 
            <param name="items">A list of item IDs you want to add to your loottable</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.AddItemsToPool(GenericLootTable,System.Collections.Generic.Dictionary{System.Int32,System.Single})">
            <summary>
            Adds an item to a loot table via PickupObject (Will keep weight at 1)
            </summary>
            <param name="lootTable">The loot table you want to add to</param> 
            <param name="items">A dictionary of item IDs and their weights. The FIRST VALUE IS THE ID.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.AddItemToPool(GenericLootTable,System.Int32,System.Single)">
            <summary>
            Adds an item to a loot table via PickupObjectId
            </summary>
            <param name="lootTable">The loot table you want to add to</param> 
            <param name="poID">The id of the PickupObject you're adding</param>
            <param name="weight">The Weight of the item you're adding (default is 1)</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.RemovePickupFromLootTables(PickupObject)">
            <summary>
            Removes a pickup object from the default guns and items loot table
            </summary>
            <param name="po">The pickup object you want to remove</param> 
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.FindWeightedGameObjectInCollection(WeightedGameObjectCollection,PickupObject)">
            <summary>
            Finds a weighted game object corresponding to a given pickup object in a weighted game object collection.
            </summary>
            <param name="collection">The collection you are searching</param> 
            <param name="po">The pickup object you want to find</param> 
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.FindWeightedGameObjectInCollection(WeightedGameObjectCollection,System.Int32)">
            <summary>
            Finds a weighted game object corresponding to a given pickup object id in a weighted game object collection.
            </summary>
            <param name="collection">The collection you are searching</param> 
            <param name="id">The id of the pickup object you want to find</param> 
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.FindWeightedGameObjectInCollection(WeightedGameObjectCollection,UnityEngine.GameObject)">
            <summary>
            Finds a weighted game object corresponding to a given gameobject in a weighted game object collection.
            </summary>
            <param name="collection">The collection you are searching</param> 
            <param name="obj">The gameobject you want to find</param> 
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.Shared.CallPrivate(MonoMod.Cil.ILCursor,System.Type,System.String)">
            <summary>Convenience method for calling an internal / private static function with an ILCursor</summary>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.CalculateVectorBetween(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a Vector2 value corresponding to the direction between the first and second positions. Useful for trajectories.
            </summary>
            <param name="startVector">The starting position in the trajectory.</param>
            <param name="endVector">The ending position in the trajectory.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.CalculateVectorBetween(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns a Vector2 value corresponding to the direction between the first and second positions. Useful for trajectories.
            </summary>
            <param name="startVector">The starting position in the trajectory.</param>
            <param name="endVector">The ending position in the trajectory.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.RadianToVector2(System.Single)">
            <summary>
            Converts a given radian into a Vector2.
            </summary>
            <param name="radian">The radian to convert.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.DegreeToVector2(System.Single)">
            <summary>
            Converts an angle degree into a Vector2.
            </summary>
            <param name="degree">The degree to convert.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.DegreeToVector2(System.Int32)">
            <summary>
            Converts an angle degree into a Vector2.
            </summary>
            <param name="degree">The degree to convert.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.isEven(System.Single)">
            <summary>
            Returns true if the given float is even.
            </summary>
            <param name="number">The float to check.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.isEven(System.Int32)">
            <summary>
            Returns true if the given integer is even.
            </summary>
            <param name="number">The integer to check.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.IsBetweenRange(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the given float is between the provided number range.
            </summary>
            <param name="numberToCheck">The float to check.</param>
            <param name="bottom">The low end of the given range to check.</param>
            <param name="top">The high end of the given range to check.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.GetAccuracyAngled(System.Single,System.Single,PlayerController)">
            <summary>
            Takes a float which represents an angle, and returns that same angle with a random degree of variance, similarly to gun accuracy.
            </summary>
            <param name="startFloat">The starting angle.</param>
            <param name="variance">The amount by which the starting angle may vary in either direction.</param>
            <param name="playerToScaleAccuracyOff">If set, the amount of variance will be affected by the given player's accuracy stat.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.RemoveInvalidIDListEntries(System.Collections.Generic.List{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Takes a list of item IDs. Removes 'invalid' entries based on set criteria, and returns the modified list.
            </summary>
            <param name="starterList">The list to be checked. Should only contain existing item IDs.</param>
            <param name="checkPlayerInventories">Removes item IDs that are currently in a player's inventory.</param>
            <param name="checkUnlocked">Removes item IDs which have not yet been unlocked.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.GetRandomQuality(PickupObjectDatabase,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a random item quality between D and S, with decreasing probability. Configurable probability. If one tier chance is set, all must be set. D tier is not set, as it is the default if no other tiers are chosen.
            </summary>
            <param name="dat">The pickupobjectdatabase.</param>
            <param name="cChance">The chance for the returned item to be C Tier.</param>
            <param name="bChance">The chance for the returned item to be B Tier.</param>
            <param name="aChance">The chance for the returned item to be A Tier.</param>
            <param name="sChance">The chance for the returned item to be S Tier.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.GetNearestEnemyToPosition(UnityEngine.Vector2,System.Boolean,Dungeonator.RoomHandler.ActiveEnemyType,System.Collections.Generic.List{AIActor},System.Func{AIActor,System.Boolean})">
            <summary>
            Returns the AIActor of the nearest enemy to the Vector2 position.
            By default, will only return engaged enemies with HealthHavers who are alive and vulnerable. Use overrideValidityCheck if this is not what you want.
            </summary>
            <param name="position">The position to check.</param>
            <param name="checkIsWorthShootingAt">If true, will ignore enemies such as Mountain Cubes.</param>
            <param name="type">Controls whether or not the check should ignore enemies who are not required for room clear.</param>
            <param name="excludedActors">AIactors on this list will be ignored.</param>
            <param name="overrideValidityCheck">A func which allows the manual checking of custom parameters for enemy validity.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.GetNearestEnemyToPosition(IntVector2,System.Boolean,Dungeonator.RoomHandler.ActiveEnemyType,System.Collections.Generic.List{AIActor},System.Func{AIActor,System.Boolean})">
            <summary>
            Returns the AIActor of the nearest enemy to the IntVector2 position.
            By default, will only return engaged enemies with HealthHavers who are alive and vulnerable. Use overrideValidityCheck if this is not what you want.
            </summary>
            <param name="position">The position to check.</param>
            <param name="checkIsWorthShootingAt">If true, will ignore enemies such as Mountain Cubes.</param>
            <param name="type">Controls whether or not the check should ignore enemies who are not required for room clear.</param>
            <param name="excludedActors">AIactors on this list will be ignored.</param>
            <param name="overrideValidityCheck">A func which allows the manual checking of custom parameters for enemy validity.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.GetVectorToNearestEnemy(UnityEngine.Vector2,System.Boolean,Dungeonator.RoomHandler.ActiveEnemyType,System.Collections.Generic.List{AIActor},System.Func{AIActor,System.Boolean})">
            <summary>
            Returns a Vector2 corresponding to the direction towards the nearest enemy to the initial position.
            By default, will only return engaged enemies with HealthHavers who are alive and vulnerable. Use overrideValidityCheck if this is not what you want.
            </summary>
            <param name="position">The position to check.</param>
            <param name="checkIsWorthShooting">If true, will ignore enemies such as Mountain Cubes.</param>
            <param name="type">Controls whether or not the check should ignore enemies who are not required for room clear.</param>
            <param name="excludedActors">AIactors on this list will be ignored.</param>
            <param name="overrideValidityCheck">A func which allows the manual checking of custom parameters for enemy validity.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.GetPositionOfNearestEnemy(UnityEngine.Vector2,Alexandria.Misc.ActorCenter,System.Boolean,Dungeonator.RoomHandler.ActiveEnemyType,System.Collections.Generic.List{AIActor},System.Func{AIActor,System.Boolean})">
            <summary>
            Returns a Vector2 corresponding to position of the nearest enemy to the original position.
            By default, will only return engaged enemies with HealthHavers who are alive and vulnerable. Use overrideValidityCheck if this is not what you want.
            Returns Vector2.zero if there is not a valid enemy in the room, or it did not have the required component for the centerType.
            </summary>
            <param name="position">The position to check.</param>
            <param name="centerType">How the position of the enemy should be determined. RIGIDBODY will return the SpecRigidBody UnitCenter, SPRITE will return the Sprite.WorldCenter, and TRANSFORM will return the Transform position.</param>
            <param name="checkIsWorthShootingAt">If true, will ignore enemies such as Mountain Cubes.</param>
            <param name="type">Controls whether or not the check should ignore enemies who are not required for room clear.</param>
            <param name="excludedActors">AIactors on this list will be ignored.</param>
            <param name="overrideValidityCheck">A func which allows the manual checking of custom parameters for enemy validity.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.KeyByValue``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Searches a dictionary for a specific value, and returns the corresponding key. Essentially a reverse dictionary search.
            </summary>
            <param name="dict">The dictionary to be searched.</param>
            <param name="val">The value being searched for.</param>
        </member>
        <member name="M:Alexandria.Misc.MathsAndLogicHelper.GetCenteredLookingPosForObj(UnityEngine.Vector2,SpeculativeRigidbody,System.Boolean,System.Boolean)">
            <summary>
            Returns a position relative to the initial Vector2 where the provided SpeculativeRigidBody may be spawned such that it's center will be centered upon the original position.
            </summary>
            <param name="originalValue">The original position, where the given rigidbody is desired to be centered upon.</param>
            <param name="rigidBody">The rigidbody whose dimensions are being compensated for.</param>
            <param name="centerX">If true, will return a position which will center the rigidbody along the X coordinate.</param>
            <param name="centerY">If true, will return a position which will center the rigidbody along the Y coordinate.</param>
        </member>
        <member name="M:Alexandria.Misc.RandomEnum`1.Get">
            <summary>
            Returns a random value of the Enum.
            </summary>
        </member>
        <member name="F:Alexandria.NPCAPI.CustomDiscountManager.DiscountsToAdd">
            <summary>
            The list you add your ShopDiscounts to. These will be added automatically when ShopDiscountController starts anywhere.
            </summary>
        </member>
        <member name="F:Alexandria.NPCAPI.ShopDiscount.IdentificationKey">
            <summary>
            The name of your discount. Mostly just for organization and other things.
            </summary>
        </member>
        <member name="F:Alexandria.NPCAPI.ShopDiscount.PriceMultiplier">
            <summary>
            Price multipler, self explanatory. Set it to 0.5f and whatever items you set it to will be half price!
            </summary>
        </member>
        <member name="F:Alexandria.NPCAPI.ShopDiscount.ItemIsValidForDiscount">
            <summary>
            A function for the *validity* in which your discount will be active. Make sure to return it as TRUE when the item is valid to be discounted.
            </summary>
        </member>
        <member name="F:Alexandria.NPCAPI.ShopDiscount.CanDiscountCondition">
            <summary>
            A function for your *condition* in which your discount will be active. Make sure to return it as TRUE when it should be active.
            </summary>
        </member>
        <member name="F:Alexandria.NPCAPI.ShopDiscount.CustomPriceMultiplier">
            <summary>
            A function that lets you give a *custom* price multipler, for more dynamic price reductions.
            </summary>
        </member>
        <member name="M:Alexandria.NPCAPI.ShopDiscount.GetOverride">
            <summary>
            Returns the current override value. Your discount will NOT be active while the override value is TRUE.
            </summary>
        </member>
        <member name="M:Alexandria.NPCAPI.ShopDiscount.SetOverride(System.Boolean)">
            <summary>
            Sets the override value. Your discount will NOT be active while the override value is TRUE.
            </summary>
        </member>
        <member name="M:Alexandria.NPCAPI.ShopDiscount.CanBeDiscounted">
            <summary>
            Returns TRUE if your discount is active.
            </summary>
        </member>
        <member name="M:Alexandria.NPCAPI.ShopDiscountController.DisableSetShopDiscount(System.String,System.Boolean)">
            <summary>
            Sets the override for a ShopDiscount with a specific IdentificationKey.
            </summary>
        </member>
        <member name="M:Alexandria.NPCAPI.ShopDiscountController.ReturnShopDiscountFromController(System.String)">
            <summary>
            Returns a ShopDiscount with a specific IdentificationKey.
            </summary>
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.SetUpShop(System.String,System.String,System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String},System.Int32,GenericLootTable,Alexandria.NPCAPI.CustomShopItemController.ShopCurrencyType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,UnityEngine.Vector3,UnityEngine.Vector3,Alexandria.NPCAPI.ShopAPI.VoiceBoxes,UnityEngine.Vector3[],System.Single,System.Boolean,StatModifier[],System.Func{Alexandria.NPCAPI.CustomShopController,PlayerController,System.Int32,System.Boolean},System.Func{Alexandria.NPCAPI.CustomShopController,PlayerController,System.Int32,System.Int32},System.Func{Alexandria.NPCAPI.CustomShopController,Alexandria.NPCAPI.CustomShopItemController,PickupObject,System.Int32},System.Func{PlayerController,PickupObject,System.Int32,System.Boolean},System.Func{PlayerController,PickupObject,System.Int32,System.Boolean},System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{UnityEngine.Vector2},System.Boolean,System.String,System.Boolean,System.Single,DungeonPrerequisite[],System.Single,Alexandria.NPCAPI.CustomShopController.ShopItemPoolType,System.Boolean,System.Nullable{IntVector2},System.Nullable{IntVector2})">
             <summary>
             Creates a shop object along with an npc
             </summary>
             <param name="name">Name of the npc</param> 
             <param name="prefix">Mod prefix (for example Bot)</param> 
             
             <param name="idleSpritePaths">List of *FULL* sprite paths for the idle animation</param> 
             <param name="idleFps">Fps of the idle animation (base game tends to use around 6)</param> 
             
             <param name="talkSpritePaths">List of *FULL* sprite paths for the talk animation</param> 
             <param name="talkFps">Fps of the talk animation (base game tends to use around 8)</param> 
             
             <param name="lootTable">Shop loot table</param> 
             <param name="currency">What is used to buy items at the shop</param> 
             
             <param name="runBasedMultilineGenericStringKey">String key for normal convos</param> 
             <param name="runBasedMultilineStopperStringKey">String key for if you try talking to an npc to much</param> 
             <param name="purchaseItemStringKey">String key for when the player buys something</param> 
             <param name="purchaseItemFailedStringKey">String key for when the player tries but fails to buy something</param> 
             <param name="introStringKey">String key for when the player enters the room</param> 
             <param name="attackedStringKey">String key for when the player shoots at the npc</param> 
             <param name="costModifier">The multiplier for shop prices</param> 
             <param name="itemPositions">The offset for the item(s) sold by your npc, the amount of items sold is based off how many offsets you add here (if you just want the 3 normally items spots you can use ItsDaFuckinShopApi.defaultItemPositions)</param> 
             <param name="giveStatsOnPurchase">Whether the shop modifies stats after the player buys an item for example how cursula gives curse</param> 
             <param name="statsToGiveOnPurchase"> The stats given when the player buys an item (will be ingored if statsToGiveOnPurchase is false)</param> 
             
             <param name="CustomCanBuy">The method that gets called to check if the player can buy an item (useless if currency isnt set to CUSTOM)</param> 
             <param name="CustomRemoveCurrency">The method that gets called remove currency from the player (useless if currency isnt set to CUSTOM)</param> 
             <param name="CustomPrice">The method that gets called to get the price of an item (useless if currency isnt set to CUSTOM)</param> 
             
             <param name="currencyIconPath">Sprite path for your custom currency sprite</param> 
             <param name="currencyName">The name you want your custom currecy sprite to have (i should probably remove this...)</param> 
            
             <param name="hasCarpet">Whether the shop has a carpet or something else that they sit on</param> 
             <param name="carpetSpritePath">Sprite path for the carpet or whatever</param> 
                     
             <param name="hasMinimapIcon">Whether the shop has a minimap icon to show what room theyre in</param> 
             <param name="minimapIconSpritePath">Sprite path minimap icon leave blank to just use deafult smiley face</param> 
             
             <param name="addToMainNpcPool">Whether the shop should be added to the pool of npcs that show up in the main shop a long side bello</param> 
             <param name="percentChanceForMainPool">How likely it is for the shop to show up in the main pool base game shops use 0.1</param> 
             
             <param name="prerequisites">These do unlocks and shit</param> 
             <param name="fortunesFavorRadius">The radius of the fortunes favor effect.</param> 
             <param name="poolType">Determines how your shop pool will pick items. DEFAULT is how basegame does it, DUPES allows your shop to sell deplicates and DUPES_AND_NOEXCLUSION allows your shop to sell duplicate items and EXCLUDED tier items.</param> 
             <param name="RainbowModeImmunity">Enables/Disables immunity to the dreaded capitalism killer, Rainbow mode.</param> 
            <param name="stolenFromStringKey">String key for when the NPC is stolen from.</param> 
            <param name="talkPointOffset">The offset at which the NPCs text box will appear.</param>
            <param name="npcPosition">Additional offset for where the NPC is positioned relative to its goods.</param> 
            <param name="voiceBox">An enum for selecting which pre-existing voice the NPC will use when talking.</param> 
            <param name="OnPurchase">An action for when the NPC is purchased from.</param> 
            <param name="OnSteal">An action for when the NPC is stolen from.</param> 
            <param name="canBeRobbed">Toggles whether an NPC can be stolen from.</param> 
            <param name="CarpetOffset">The offset of your carpet, relative to your NPC.</param> 
            <param name="hitboxSize">The size of your enemies hitbox. Remember, 1 is equal to 16 pixels, not 1.</param> 
            <param name="hitboxOffset">The offset of your enemies hitbox. Remember, 1 is equal to 16 pixels, not 1.</param> 
            <returns></returns>
            
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.AddAdditionalAnimationsToShop(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Single,System.Collections.Generic.List{System.String},System.Single,System.Collections.Generic.List{System.String},System.Single)">
            <summary>
            Adds additional animations to certain events to your NPC. To Note, the aanimation names that are used here for certain animations (If the NPC will have one) are called: 
            
            On Purchase Animation Name: purchase
            
            On Denied Purchase Animation Name: denied
            
            On Stolen From Animation Name: stolen
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="purchaseSpritePaths">Your purchase animation sprite paths.</param> 
            <param name="purchaseAnimFPS">Your purchase animation FPS.</param> 
            <param name="denyPurchaseSpritePaths">Your purchase denied animation sprite paths.</param> 
            <param name="denyPurchaseAnimFPS">Your purchase denied animation FPS.</param> 
            <param name="stealSpritePaths">Your on stolen from animation sprite paths.</param> 
            <param name="stealAnimFPS">Your on stolen from animation FPS.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.ChangeVoiceBox(UnityEngine.GameObject,Alexandria.NPCAPI.ShopAPI.VoiceBoxes)">
            <summary>
            Changes the voice that your NPC makes
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="voicebox">The given VoiceBox to change to.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.AddParentedAnimationToShop(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Single,System.String)">
            <summary>
            Add a new DIRECTIONAL animation to your NPC. You can then play it when you need to using CustomShopController.TryPlayAnimation()
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="yourPaths">The sprite paths for your animation.</param> 
            <param name="YourAnimFPS">Your animations FPS.</param> 
            <param name="AnimationName">Your DIRECTIONAL animations name, along with the animations name.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.AddUnparentedAnimationToShop(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Single,System.String)">
            <summary>
            Add a new animation to your NPC. This animation is NOT a directional one, but can still be played via switching a pre-existing directional animations AnimNames with this animations name or other means.
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="yourPaths">The sprite paths for your animation.</param> 
            <param name="YourAnimFPS">Your animations FPS.</param> 
            <param name="AnimationName">Your NON DIRECTIONAL animations name.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.ModifyPreExistingDirectionalAnimation(UnityEngine.GameObject,System.String,System.String)">
            <summary>
            Modifies a pre-existing directional animation in your NPC to use a different NON-Directional animation that it ALSO has.
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="DirectionalAnimationPrefixToModify">The Prefix of your DIRECTIONAL animation.</param> 
            <param name="YourNonDirectionalAnimationName">The NAME of your NON DIRECTIONAL animation.</param> 
        </member>
        <member name="T:Alexandria.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alexandria.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alexandria.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="F:Alexandria.SoundAPI.SoundManager.CustomSwitchData">
            <summary>
            Hierarchy:
              Original Event
                Switch Group
                  Switch Value
                    Events for custom switch.
            </summary>
        </member>
        <member name="F:Alexandria.SoundAPI.SoundManager.SwitchlessAddedEvents">
            <summary>
            Dictionary where keys are the names of original events and the values are the switched events that will be played in addition to the original.
            </summary>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.PostEvent_Orig(System.String,UnityEngine.GameObject)">
            <summary>
            Original version of the Post Event method that won't play any custom switched events.
            </summary>
            <param name="in_pszEventName"></param>
            <param name="in_gameObjectID"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.SetSwitch_Orig(System.String,System.String,UnityEngine.GameObject)">
            <summary>
            Original version of the Set Switch method that won't store the new switch.
            </summary>
            <param name="in_pszSwitchGroup"></param>
            <param name="in_pszSwitchState"></param>
            <param name="in_gameObjectID"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.AddCustomSwitchData(System.String,System.String,System.String,Alexandria.SoundAPI.SwitchedEvent[])">
            <summary>
            Adds a switch override to the event <paramref name="originalEventName"/> that will play the <paramref name="overrideEvents"/> when the value of the group <paramref name="switchGroup"/> is <paramref name="switchValue"/>.
            </summary>
            <param name="switchGroup">The name of the switch group the switch override will apply to.</param>
            <param name="switchValue">The name of the switch value the <paramref name="switchGroup"/> will need to have for the overrides to apply.</param>
            <param name="originalEventName">The name of the original event the overrides will apply to.</param>
            <param name="overrideEvents">An array of the new events that will be played. Can be null or empty to make the event make no sound.</param>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.AddSwitchlessAdditionalEvent(System.String,Alexandria.SoundAPI.SwitchedEvent[])">
            <summary>
            Makes the <paramref name="additionalEvents"/> always be played in addition to <paramref name="originalEventName"/>.
            </summary>
            <param name="originalEventName">The name of the original event the additional events will be added to.</param>
            <param name="additionalEvents">An array of the events that will be played alongside <paramref name="originalEventName"/></param>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.LoadSoundbanksFromAssembly(System.Reflection.Assembly)">
            <summary>
            Loads all soundbanks from a given or calling assembly.
            </summary>
            <param name="assembly">The assembly to load the soundbanks from. If null, the calling assembly will be used instead.</param>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.LoadSoundbankFromAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Loads a specific soundbank from a given or calling assembly.
            </summary>
            <param name="path">The resource path to the soundbank.</param>
            <param name="assembly">The assembly to load the soundbanks from. If null, the calling assembly will be used instead.</param>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.LoadSoundbankFromStream(System.IO.Stream,System.String)">
            <summary>
            Loads a soundbank from a given stream.
            </summary>
            <param name="stream">The stream to read the soundbank from.</param>
            <param name="bankName">The name of the bank that will be loaded.</param>
        </member>
        <member name="M:Alexandria.SoundAPI.SoundManager.LoadSoundbankFromBytes(System.Byte[],System.String)">
            <summary>
            Loads a soundbank from a given array of bytes.
            </summary>
            <param name="bytes">The array containing the soundbank bytes.</param>
            <param name="bankName">The name of the bank that will be loaded.</param>
        </member>
        <member name="T:Alexandria.SoundAPI.SwitchedEvent">
            <summary>
            A class representing an event being played with a specific switch.
            </summary>
        </member>
        <member name="F:Alexandria.SoundAPI.SwitchedEvent.EventName">
            <summary>
            The name of the event that will be played.
            </summary>
        </member>
        <member name="F:Alexandria.SoundAPI.SwitchedEvent.SwitchGroup">
            <summary>
            The switch group for the switch that will be played. If null or empty, the event will be played normally.
            </summary>
        </member>
        <member name="F:Alexandria.SoundAPI.SwitchedEvent.SwitchValue">
            <summary>
            The value of the switch that will be played.
            </summary>
        </member>
        <member name="M:Alexandria.SoundAPI.SwitchedEvent.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new SwitchedEvent and sets its SwitchGroup and SwitchValue.
            </summary>
            <param name="eventName">The name of the event that will be played.</param>
            <param name="switchGroup">The switch group for the switch that will be played. If null or empty, the event will be played normally.</param>
            <param name="switchValue">The value of the switch that will be played.</param>
        </member>
        <member name="M:Alexandria.SoundAPI.SwitchedEvent.#ctor(System.String)">
            <summary>
            Creates a new SwitchedEvent without any switch overrides.
            </summary>
            <param name="eventName">The name of the event that will be played.</param>
        </member>
        <member name="M:Alexandria.SoundAPI.SwitchedEvent.Play(UnityEngine.GameObject)">
            <summary>
            Plays the event. If SwitchGroup isn't null, tepmorarily sets its switch value to SwitchValue.
            </summary>
            <param name="go">The object the event will be played on.</param>
            <returns></returns>
        </member>
        <member name="P:Alexandria.StatAPI.CustomStatValues.Item(System.String,System.String)">
            <summary>
            Gets or sets the current value of a stat from the mod with the prefix modPrefix and the name statName.
            </summary>
            <param name="modPrefix">The prefix of the mod that adds the stat.</param>
            <param name="statName">The name of the stat.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.StatAPI.ExtendedPlayerStats.GetStatValue(System.String,System.String)">
            <summary>
            Returns the current value of a custom stat from a mod with the prefix modPrefix and name statName.
            </summary>
            <param name="modPrefix">The prefix of the mod that adds the stat.</param>
            <param name="statName">The name of the stat.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.StatAPI.ExtendedPlayerStats.GetBaseStatValue(System.String,System.String)">
            <summary>
            Returns the base value of a custom stat from a mod with the prefix modPrefix and name statName.
            </summary>
            <param name="modPrefix">The prefix of the mod that adds the stat.</param>
            <param name="statName">The name of the stat.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.StatAPI.ExtendedPlayerStats.SetBaseStatValue(System.String,System.String,System.Single)">
            <summary>
            Sets the base value of a custom stat from a mod with the prefix modPrefix and name statName.
            </summary>
            <param name="modPrefix">The prefix of the mod that adds the stat.</param>
            <param name="statName">The name of the stat.</param>
            <param name="value">The new base value for the stat.</param>
        </member>
        <member name="F:Alexandria.StatAPI.ModifyMethodE.TrueMultiplicative">
            <summary>
            A method of stat modification similar to the Multiplicative method, but TrueMultiplicative stat modifiers are applied after additive stat modifiers, unlike Multiplicative stat modifiers.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.ModifyMethodE.Exponent">
            <summary>
            A method of stat modification that boosts the value of a stat to a power equal to the stat modifier's amount. Exponent modifiers are the last to be applied.
            </summary>
        </member>
        <member name="M:Alexandria.StatAPI.StatAPIManager.GetExtComp(PlayerStats)">
            <summary>
            Returns the ExtendedPlayerStats present on the specified PlayerStats. If not present, adds an ExtendedPlayerStats component to the PlayerStats and returns it.
            </summary>
            <param name="s">The target PlayerStats</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.StatAPI.StatAPIManager.IsNegativeCurse(StatModifier)">
            <summary>
            Returns true if the given StatModifier increases curse, returns false otherwise. For exponent modifiers, returns true if the amount is greater than 1.
            </summary>
            <param name="mod">The stat modifier to check.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.StatAPI.StatAPIManager.CreateCustomStatModifier(System.String,System.String,System.Single,StatModifier.ModifyMethod)">
            <summary>
            Creates a stat modifier that modifies a custom stat from a mod with the prefix modPrefix and name statName.
            </summary>
            <param name="modPrefix">The prefix of the mod that adds the stat.</param>
            <param name="statName">The name of the stat.</param>
            <param name="amount">The modification amount for the stat modifier.</param>
            <param name="method">The modify method for the stat modifier.</param>
            <returns></returns>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.baseStatValues">
            <summary>
            Base values for custom stats. The key is a tuple with the first element being a mod prefix and the second being the name of a stat and the value is the default value. Stats not in this dictionary will have 1 as their default value.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.PreCustomStatModification">
            <summary>
            An action that will run after all modifiers have been applied to base stats and before starting custom stat calculation.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.PreModifiers">
            <summary>
            An action that will run before applying modifiers to custom stats.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.AfterMultiplicative">
            <summary>
            An action that will run after applying all multiplicative modifiers to custom stats. Multiplicative modifiers are the first modifiers to be applied.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.AfterAdditive">
            <summary>
            An action that will run after applying all additive modifiers to custom stats. Additive modifiers are applied second, after multiplicative modifiers.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.AfterTrueMultiplicative">
            <summary>
            An action that will run after applying all true multiplicative modifiers to custom stats. True multiplicative modifiers are applied third, after additive modifiers.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.AfterExponent">
            <summary>
            An action that will run after applying all exponent modifiers to custom stats. Exponent modifiers are the last modifiers to be applied.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.FinalPostProcessing">
            <summary>
            An action that will run at the end of custom stat calculation, after all modifiers have been applied and healing modifications have been processed.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.ProcessStatMod">
            <summary>
            An action that will run when a stat modifier is processed.
            </summary>
        </member>
        <member name="F:Alexandria.StatAPI.StatAPIManager.ProcessUnprocessedMod">
            <summary>
            An action that will run when a stat modifier is processed for the first time in addition to ProcessStatMod.
            </summary>
        </member>
        <member name="T:Alexandria.StatAPI.StatAPIManager.StatModificationDelegate">
            <summary>
            A delegate used by actions that happen during custom stat calculation.
            </summary>
            <param name="stats">The PlayerStats that are being recalculated.</param>
            <param name="owner">The owner of the PlayerStats.</param>
            <param name="values">The custom stat values that can be modified.</param>
            <param name="healAmount">The amount by which the owner will be healed at the end of the recalculation. This is mostly used for healing when picking up health modifiers for the first time.</param>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBestShortSideFit">
            <summary> Positions the rectangle against the short side of a free rectangle into which it fits the best </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBestLongSideFit">
            <summary> Positions the rectangle against the long side of a free rectangle into which it fits the best </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBestAreaFit">
            <summary> Positions the rectangle into the smallest free rect into which it fits </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBottomLeftRule">
            <summary> Does the Tetris placement </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectContactPointRule">
            <summary>  the placement where the rectangle touches other rects as much as possible </summary>
        </member>
        <member name="M:TexturePacker.MaxRectsBinPack.Occupancy">
            Computes the ratio of used surface area.
        </member>
        <member name="M:TexturePacker.MaxRectsBinPack.CommonIntervalLength(System.Int32,System.Int32,System.Int32,System.Int32)">
            Returns 0 if the two intervals i1 and i2 are disjoint, or the length of their overlap otherwise.
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.PosStateBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitContextBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitPosBits" -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:LZ4.LZ4Codec">
            <summary>
                LZ4 codec selecting best implementation depending on platform.
            </summary>
        </member>
        <member name="F:LZ4.LZ4Codec.Encoder">
            <summary>Encoding service.</summary>
        </member>
        <member name="F:LZ4.LZ4Codec.EncoderHC">
            <summary>Encoding service for HC algorithm.</summary>
        </member>
        <member name="F:LZ4.LZ4Codec.Decoder">
            <summary>Decoding service.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.#cctor">
            <summary>Initializes the <see cref="T:LZ4.LZ4Codec" /> class.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.AutoTest(LZ4.ILZ4Service)">
            <summary>Performs the quick auto-test on given compression service.</summary>
            <param name="service">The service.</param>
            <returns>A service or <c>null</c> if it failed.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Try(System.Action)">
            <summary>Tries to execute specified action. Ignores exception if it failed.</summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:LZ4.LZ4Codec.Try``1(System.Func{``0},``0)">
            <summary>Tries to execute specified action. Ignores exception if it failed.</summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="method">The method.</param>
            <param name="defaultValue">The default value, returned when action fails.</param>
            <returns>Result of given method, or default value.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.TryService``1">
            <summary>Tries to create a specified <seealso cref="T:LZ4.ILZ4Service" /> and tests it.</summary>
            <typeparam name="T">Concrete <seealso cref="T:LZ4.ILZ4Service" /> type.</typeparam>
            <returns>A service if succeeded or <c>null</c> if it failed.</returns>
        </member>
        <member name="P:LZ4.LZ4Codec.CodecName">
            <summary>Gets the name of selected codec(s).</summary>
            <value>The name of the codec.</value>
        </member>
        <member name="M:LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Get maximum output length.</summary>
            <param name="inputLength">Input length.</param>
            <returns>Output length.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Poke4(System.Byte[],System.Int32,System.UInt32)">
            <summary>Sets uint32 value in byte buffer.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LZ4.LZ4Codec.Peek4(System.Byte[],System.Int32)">
            <summary>Gets uint32 from byte buffer.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Wrap(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Compresses and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="highCompression">if set to <c>true</c> uses high compression.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.WrapHC(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses (with high compression algorithm) and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Unwrap(System.Byte[],System.Int32)">
            <summary>Unwraps the specified compressed buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <returns>Uncompressed buffer.</returns>
            <exception cref="T:System.ArgumentException">
                inputBuffer size is invalid or inputBuffer size is invalid or has been corrupted
            </exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Has2015Runtime">
            <summary>Determines whether VS2015 runtime is installed. 
            Note, on Mono the Registry class is not available at all, 
            so access to it have to be isolated.</summary>
            <returns><c>true</c> it VS2010 runtime is installed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4mm">
            <summary>Initializes codecs from LZ4mm.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4cc">
            <summary>Initializes codecs from LZ4cc.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4n">
            <summary>Initializes codecs from LZ4n.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4s">
            <summary>Initializes codecs from LZ4s.</summary>
        </member>
        <member name="T:LZ4ps.LZ4Codec">
            <summary>Safe LZ4 codec.</summary>
        </member>
        <member name="F:LZ4ps.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:LZ4ps.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="F:LZ4ps.LZ4Codec.BLOCK_COPY_LIMIT">
            <summary>Buffer length when Buffer.BlockCopy becomes faster than straight loop.
            Please note that safe implementation REQUIRES it to be greater (not even equal) than 8.</summary>
        </member>
        <member name="M:LZ4ps.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
    </members>
</doc>
