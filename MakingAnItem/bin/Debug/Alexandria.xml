<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alexandria</name>
    </assembly>
    <members>
        <member name="M:CustomCharacters.SpriteHandler.SpriteFromTexture(UnityEngine.Texture2D,UnityEngine.GameObject)">
            <summary>
            Returns an object with a tk2dSprite component with the texture provided
            </summary>
        </member>
        <member name="M:CustomCharacters.SpriteHandler.ConstructDefinition(UnityEngine.Texture2D,UnityEngine.Material)">
            <summary>
            Constructs a new tk2dSpriteDefinition with the given texture
            </summary>
            <returns>A new sprite definition with the given texture</returns>
        </member>
        <member name="M:CustomCharacters.SpriteHandler.AddSpriteToCollection(UnityEngine.Texture2D,tk2dSpriteCollectionData,System.String)">
            <summary>
            Adds a sprite (from a texture) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:CustomCharacters.SpriteHandler.AddSpriteToCollectionWithAnchor(UnityEngine.Texture2D,tk2dSpriteCollectionData,tk2dBaseSprite.Anchor,System.String)">
            <summary>
            Adds a sprite (from a texture) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:CustomCharacters.SpriteHandler.AddSpriteToCollection(UnityEngine.Texture2D,tk2dSpriteCollectionData,UnityEngine.Material,System.String)">
            <summary>
            Adds a sprite (from a texture) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:CustomCharacters.ToolsCharApi.AddNewItemToAtlas(dfAtlas,UnityEngine.Texture2D,System.String)">
            <summary>
            Builds and adds a new <see cref="T:dfAtlas.ItemInfo"/> to <paramref name="atlas"/> with the texture of <paramref name="tex"/> and the name of <paramref name="name"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to add the new <see cref="T:dfAtlas.ItemInfo"/> to.</param>
            <param name="tex">The texture of the new <see cref="T:dfAtlas.ItemInfo"/>.</param>
            <param name="name">The name of the new <see cref="T:dfAtlas.ItemInfo"/>. If <see langword="null"/>, it will default to <paramref name="tex"/>'s name.</param>
            <returns>The built <see cref="T:dfAtlas.ItemInfo"/>.</returns>
        </member>
        <member name="M:CustomCharacters.ToolsCharApi.GetPixelRegions(dfAtlas)">
            <summary>
            Gets the pixel regions of <paramref name="atlas"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to get the pixel regions from.</param>
            <returns>A list with all pixel regions in <paramref name="atlas"/></returns>
        </member>
        <member name="M:CustomCharacters.ToolsCharApi.Convert``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            Converts a list of the type <typeparamref name="T"/> to a list of the type <typeparamref name="T2"/> using <paramref name="convertor"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="self"/> list.</typeparam>
            <typeparam name="T2">The type to convert the <paramref name="self"/> list to.</typeparam>
            <param name="self">The original list.</param>
            <param name="convertor">A delegate that converts an element of type <typeparamref name="T"/> to an element of a type <typeparamref name="T2"/>.</param>
            <returns>The converted list of type <typeparamref name="T2"/></returns>
        </member>
        <member name="M:CustomCharacters.ToolsCharApi.FindFirstValidEmptySpace(dfAtlas,IntVector2)">
            <summary>
            Gets the first empty space in <paramref name="atlas"/> that has at least the size of <paramref name="pixelScale"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to find the empty space in.</param>
            <param name="pixelScale">The required size of the empty space.</param>
            <returns>The rect of the empty space divided by the atlas texture's size.</returns>
        </member>
        <member name="M:CustomCharacters.ToolsCharApi.ResizeAtlas(dfAtlas,IntVector2)">
            <summary>
            Resizes <paramref name="atlas"/> and all of it's <see cref="T:dfAtlas.ItemInfo"/>s.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to resize/</param>
            <param name="newDimensions"><paramref name="atlas"/>'s new size.</param>
        </member>
        <member name="M:CustomCharacters.ToolsCharApi.ResizeBetter(UnityEngine.Texture2D,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes <paramref name="tex"/> without it losing it's pixel information.
            </summary>
            <param name="tex">The <see cref="T:UnityEngine.Texture2D"/> to resize.</param>
            <param name="width">The <paramref name="tex"/>'s new width.</param>
            <param name="height">The <paramref name="tex"/>'s new height.</param>
            <returns></returns>
        </member>
        <member name="M:CustomCharacters.ToolsCharApi.ToVector2Int(IntVector2)">
            <summary>
            Converts <paramref name="vector"/> to a <see cref="T:UnityEngine.Vector2Int"/>.
            </summary>
            <param name="vector">The <see cref="T:IntVector2"/> to convert.</param>
            <returns><paramref name="vector"/> converted to <see cref="T:UnityEngine.Vector2Int"/>.</returns>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBestShortSideFit">
            <summary> Positions the rectangle against the short side of a free rectangle into which it fits the best </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBestLongSideFit">
            <summary> Positions the rectangle against the long side of a free rectangle into which it fits the best </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBestAreaFit">
            <summary> Positions the rectangle into the smallest free rect into which it fits </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectBottomLeftRule">
            <summary> Does the Tetris placement </summary>
        </member>
        <member name="F:TexturePacker.dfTexturePackingMethod.RectContactPointRule">
            <summary>  the placement where the rectangle touches other rects as much as possible </summary>
        </member>
        <member name="M:TexturePacker.MaxRectsBinPack.Occupancy">
            Computes the ratio of used surface area.
        </member>
        <member name="M:TexturePacker.MaxRectsBinPack.CommonIntervalLength(System.Int32,System.Int32,System.Int32,System.Int32)">
            Returns 0 if the two intervals i1 and i2 are disjoint, or the length of their overlap otherwise.
        </member>
        <member name="T:Alexandria.ItemAPI.AdvancedGunBehavior">
            <summary>
            Advanced version of a GunBehaviour. Still has all methods of a GunBehaviour, but also has some new ones.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.Update">
            <summary>
            Update() is called every tick when the gun is the player's current gun or is dropped.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.InheritData(Gun)">
            <summary>
            Inherits data from another gun. Inherit the variables you want to be saved here!
            </summary>
            <param name="source">The source gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.MidGameSerialize(System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            Saves the data of the gun to a list. Save the variables you want to be saved here!
            </summary>
            <param name="data">The list.</param>
            <param name="dataIndex">DataIndex. You don't need to use this argument.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.MidGameDeserialize(System.Collections.Generic.List{System.Object},System.Int32@)">
            <summary>
            Sets the data of the gun to the contents of a list. Set the variables you want to be saved here!
            </summary>
            <param name="data">The list.</param>
            <param name="dataIndex">DataIndex. Add a number equal to the amount of your data to it.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.Start">
            <summary>
            Start() is called when the gun is created. It's also called when the player picks up or drops the gun.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.NonCurrentGunUpdate">
            <summary>
            NonCurrentGunUpdate() is called every tick EVEN IF THE GUN ISN'T ENABLED. That means it's able to run even if the player's current gun isn't this beh
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnInitializedWithOwner(GameActor)">
            <summary>
            OnInitializedWithOwner() is called when a GunInventory creates a gun to add (for example when the player picks the gun up.) 
            </summary>
            <param name="actor">The gun's owner.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.PostProcessProjectile(Projectile)">
            <summary>
            PostProcessProjectile() is called right after the gun shoots a projectile. If you want to change properties of a projectile in runtime, this is the place to do it.
            </summary>
            <param name="projectile">The target projectile.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.PostProcessVolley(ProjectileVolleyData)">
            <summary>
            PostProcessVolley() is called when PlayerStats rebuilds a gun's volley. It's used by things like VolleyModificationSynergyProcessor to change the gun's volley if the player has a synergy.
            </summary>
            <param name="volley">The target volley.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnDropped">
            <summary>
            OnDropped() is called when an a player drops the gun. gun.CurrentOwner is set to null before this method is even called, so I wouldn't reccomend using it.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAutoReload(PlayerController,Gun)">
            <summary>
            OnAutoReload() is called when a player reloads the gun with an empty clip.
            </summary>
            <param name="player">The player that reloaded the gun. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAutoReloadSafe(PlayerController,Gun)">
            <summary>
            OnAutoReloadSafe() is called when a player reloads the gun with an empty clip and the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadPressed(PlayerController,Gun,System.Boolean)">
            <summary>
            OnReloadPressed() is called when the owner reloads the gun or the player presses the reload key.
            </summary>
            <param name="player">The player that reloaded the gun/pressed the reload key. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
            <param name="manualReload">True if the owner reloaded the gun by pressing the reload key. False if the owner reloaded the gun by firing with an empty clip.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnGunsChanged(Gun,Gun,System.Boolean)">
            <summary>
            OnGunsChanged() is called when the player changes the current gun.
            </summary>
            <param name="previous">The previous current gun.</param>
            <param name="current">The new current gun.</param>
            <param name="newGun">True if the gun was changed because player picked up a new gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnSwitchedToThisGun">
            <summary>
            OnSwitchedToThisGun() when the player switches to this behaviour's affected gun.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnSwitchedAwayFromThisGun">
            <summary>
            OnSwitchedToThisGun() when the player switches away from this behaviour's affected gun.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadPressedSafe(PlayerController,Gun,System.Boolean)">
            <summary>
            OnReloadPressedSafe() is called when the owner reloads the gun or the player presses the reload key and the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun/pressed the reload key. Can't be null.</param>
            <param name="gun">The gun.</param>
            <param name="manualReload">True if the owner reloaded the gun by pressing the reload key. False if the owner reloaded the gun by firing with an empty clip.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReload(PlayerController,Gun)">
            <summary>
            OnReload() is called when the gun is reloaded.
            </summary>
            <param name="player">The player that reloaded the gun. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadEnded(PlayerController,Gun)">
            <summary>
            OnReloadEnded() is called at the end of reload.
            </summary>
            <param name="player">The player that reloaded the gun. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadEndedSafe(PlayerController,Gun)">
            <summary>
            OnReloadEndedSafe() is called at the end of reload and if the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnReloadSafe(PlayerController,Gun)">
            <summary>
            OnReloadSafe() is called when the gun is reloaded and the gun's owner is a player.
            </summary>
            <param name="player">The player that reloaded the gun. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnFinishAttack(PlayerController,Gun)">
            <summary>
            OnFinishAttack() is called when the gun finishes firing, for example when the player releases the Shoot key or the gun's clip empties and if the owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostFired(PlayerController,Gun)">
            <summary>
            OnPostFired() is called after the gun fired and if the owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnHeroSwordCooldownStarted(PlayerController,Gun)">
            <summary>
            OnHeroSwordCooldownStarted() when the gun's Sword Slash started and if the gun is a HeroSword (if gun.IsHeroSword = true).
            </summary>
            <param name="player"></param>
            <param name="gun"></param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAmmoChanged(PlayerController,Gun)">
            <summary>
            OnAmmoChanged() is called when the gun's ammo amount increases/decreases.
            </summary>
            <param name="player">The player. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnAmmoChangedSafe(PlayerController,Gun)">
            <summary>
            OnAmmoChangedSafe() is called when the gun's ammo amount increases/decreases and if the gun's owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnBurstContinued(PlayerController,Gun)">
            <summary>
            OnBurstContinued() is called when the gun continues a burst (attacks while bursting).
            </summary>
            <param name="player">The player. Will be null if the gun's owner isn't a player.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnBurstContinuedSafe(PlayerController,Gun)">
            <summary>
            OnBurstContinuedSafe() is called when the gun continues a burst (attacks while bursting) and if the gun's owner is a player.
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="gun">The gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.CollectedAmmoPickup(PlayerController,Gun,AmmoPickup)">
            <summary>
            This method is called when the player attempts to interact with an ammo box. If true is returned, the original code to attempt to collect the box will run. If false is returned, the original code for collecting the ammo box will not run (ideal if you want to do something different on ammo pickup, and remove the box manually).
            </summary>
            <param name="player">The player. Can't be null.</param>
            <param name="self">The gun.</param>
            <param name="pickup">The ammo pickup being interacted with.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPreFireProjectileModifier(Gun,Projectile,ProjectileModule)">
            <summary>
            OnPreFireProjectileModifier() is called before the gun shoots a projectile. If the method returns something that's not the projectile argument, the projectile the gun will shoot will be replaced with the returned projectile.
            </summary>
            <param name="gun">The gun.</param>
            <param name="projectile">Original projectile.</param>
            <param name="mod">Target ProjectileModule.</param>
            <returns>The replacement projectile.</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPickup(GameActor)">
            <summary>
            OnPickup() is called when an actor picks the gun up.
            </summary>
            <param name="owner">The actor that picked up the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostDrop(GameActor)">
            <summary>
            OnPostDrop() is called AFTER the owner drops the gun.
            </summary>
            <param name="owner">The actor that dropped the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPickedUpByPlayer(PlayerController)">
            <summary>
            OnPickup() is called when a player picks the gun up.
            </summary>
            <param name="player">The player that picked up the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostDroppedByPlayer(PlayerController)">
            <summary>
            OnPostDrop() is called AFTER the player drops the gun. If you modify player's stats here, don't forget to call player.stats.RecalculateStats()!
            </summary>
            <param name="player">The player that dropped the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPickedUpByEnemy(AIActor)">
            <summary>
            OnPickup() is called when an enemy picks the gun up.
            </summary>
            <param name="enemy">The enemy that picked up the gun.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.AdvancedGunBehavior.OnPostDroppedByEnemy(AIActor)">
            <summary>
            OnPostDrop() is called AFTER the enemy drops the gun.
            </summary>
            <param name="enemy">The enemy that dropped the gun.</param>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.PickedUp">
            <summary>
            Returns true if the gun's current owner isn't null.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.Player">
            <summary>
            If the gun's owner is a player, returns the gun's current owner as a player.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.HeroSwordCooldown">
            <summary>
            Returns the HeroSwordCooldown of the gun if it isn't null. If it's null, returns -1.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.Owner">
            <summary>
            Returns the gun's current owner.
            </summary>
        </member>
        <member name="P:Alexandria.ItemAPI.AdvancedGunBehavior.PickedUpByPlayer">
            <summary>
            Returns true if the gun's owner isn't null and is a player.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.everPickedUpByPlayer">
            <summary>
            Returns true if the gun was ever picked up by a player.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.everPickedUp">
            <summary>
            Returns true if the gun was ever picked up.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.hasReloaded">
            <summary>
            Returns the gun this behaviour is applied to.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.preventNormalFireAudio">
            <summary>
            If true, prevents the gun's normal fire audio.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.preventNormalReloadAudio">
            <summary>
            If true, prevents the gun's normal reload audio.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.overrideNormalFireAudio">
            <summary>
            The gun's override fire audio. Only works if preventNormalFireAudio is true.
            </summary>
        </member>
        <member name="F:Alexandria.ItemAPI.AdvancedGunBehavior.overrideNormalReloadAudio">
            <summary>
            The gun's override reload audio. Only works if preventNormalReloadAudio is true.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.IsFakePrefab(UnityEngine.Object)">
            <summary>
            Checks if an object is marked as a fake prefab.
            </summary>
            <returns><c>true</c>, if object is in the list of fake prefabs, <c>false</c> otherwise.</returns>
            <param name="o">Unity object to test.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.MarkAsFakePrefab(UnityEngine.GameObject)">
            <summary>
            Marks an object as a fake prefab.
            </summary>
            <param name="obj">GameObject to add to the list.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.Clone(UnityEngine.GameObject)">
            <summary>
            Clones a real prefab or a fake prefab into a new fake prefab.
            </summary>
            <returns>The new game object.</returns>
            <param name="obj">GameObject to clone.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.FakePrefab.Instantiate(UnityEngine.Object,UnityEngine.Object)">
            <summary>
            Activates objects that have been created from a fake prefab, otherwise simply returns them.
            </summary>
            <returns>The same Unity object as the one passed in <c>new_o</c>, activated if <c>o</c> is a fake prefab..</returns>
            <param name="o">Original object.</param>
            <param name="new_o">The object instantiated from the original object.</param>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.Init">
            <summary>
            Initializes hooks and grabs necessary assets for building items
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.LoadShopTables">
            <summary>
            Loads the loot tables of shops for later modification.
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.LoadShopTable(System.String)">
            <summary>
            Gets a loot table from shared_auto_001 from name
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.AddSpriteToObject(System.String,System.String,UnityEngine.GameObject,System.Reflection.Assembly)">
            <summary>
            Adds a tk2dSprite component to an object and adds that sprite to the 
            ammonomicon for later use. If obj is null, returns a new GameObject with the sprite
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.SetupItem(PickupObject,System.String,System.String,System.String)">
            <summary>
            Finishes the item setup, adds it to the item databases, adds an encounter trackable 
            blah, blah, blah
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.SetCooldownType(PlayerItem,Alexandria.ItemAPI.ItemBuilder.CooldownType,System.Single)">
            <summary>
            Sets the cooldown type and length of a PlayerItem, and resets all other cooldown types
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ItemBuilder.AddPassiveStatModifier(PickupObject,PlayerStats.StatType,System.Single,StatModifier.ModifyMethod)">
            <summary>
            Adds a passive player stat modifier to a PlayerItem or PassiveItem
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetTexturesFromDirectory(System.String)">
            <summary>
            Converts all png's in a folder to a list of Texture2D objects
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetTextureFromFile(System.String,System.String)">
            <summary>
            Creates a Texture2D from a file in the sprites directory
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetCollectionFiles">
            <summary>
            Retuns a list of sprite collections in the sprite folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.BytesToTexture(System.Byte[],System.String)">
            <summary>
            Converts a byte array into a Texture2D
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetResourceFolders">
            <summary>
            Returns a list of folders in the ETG resources directory
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.ExtractEmbeddedResource(System.String,System.Reflection.Assembly)">
            <summary>
            Converts an embedded resource to a byte array
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetTextureFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Converts an embedded resource to a Texture2D object
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.ResourceExtractor.GetResourceNames(System.Reflection.Assembly)">
            <summary>
            Returns a list of the names of all embedded resources
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.SpriteFromFile(System.String,UnityEngine.GameObject)">
            <summary>
            Returns an object with a tk2dSprite component with the 
            texture of a file in the sprites folder
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.SpriteFromResource(System.String,UnityEngine.GameObject,System.Reflection.Assembly)">
            <summary>
            Returns an object with a tk2dSprite component with the 
            texture of an embedded resource
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.SpriteFromTexture(UnityEngine.Texture2D,System.String,UnityEngine.GameObject)">
            <summary>
            Returns an object with a tk2dSprite component with the texture provided
            </summary>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.AddSpriteToCollection(System.String,tk2dSpriteCollectionData,System.Reflection.Assembly)">
            <summary>
            Adds a sprite (from a resource) to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.AddSpriteToCollection(tk2dSpriteDefinition,tk2dSpriteCollectionData)">
            <summary>
            Adds a sprite from a definition to a collection
            </summary>
            <returns>The spriteID of the defintion in the collection</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.SpriteBuilder.AddToAmmonomicon(tk2dSpriteDefinition)">
            <summary>
            Adds a sprite definition to the Ammonomicon sprite collection
            </summary>
            <returns>The spriteID of the defintion in the ammonomicon collection</returns>
        </member>
        <member name="M:Alexandria.ItemAPI.TrailAPI.AddTrailToProjectile(Projectile,System.String,UnityEngine.Vector2,UnityEngine.Vector2,System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String},System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Adds a tiled trail to the Projectile
            </summary>
            <param name="timeTillAnimStart">How long after spawning until the trail will begin to play it's animation, if it has one.</param>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsObject``1(System.String,System.String)">
            <summary>
            Get the value of a key as an object in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as an object.</returns>
            <typeparam name="T">The type of object you are getting.</typeparam>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValue(System.String,System.String)">
            <summary>
            Get the value of a key as a string in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as a string.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsInt(System.String,System.String)">
            <summary>
            Get the value of a key as an integer in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as an integer.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsFloat(System.String,System.String)">
            <summary>
            Get the value of a key as a float in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as a float.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.GetValueAsBoolean(System.String,System.String)">
            <summary>
            Get the value of a key as a boolean in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key as a boolean.</returns>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.SetValueAsObject``1(System.String,System.String,``0)">
            <summary>
            Set the value of a key as an object in the save data,
            It's recommended to not save an object that implements Unity's Object class as it can cause a infinite recursion and crash the game.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to set the value of.</param>
            <param name="value">The object value to set.</param>
            <typeparam name="T">The type of object you are setting.</typeparam>
        </member>
        <member name="M:Alexandria.Misc.EnumSaveData.SetValue(System.String,System.String,System.Object)">
            <summary>
            Set the value of a key in the save data.
            </summary>
            <param name="guid">The GUID of the mod.</param>
            <param name="key">The key to set the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.CreateLootTable(System.Collections.Generic.List{GenericLootTable},DungeonPrerequisite[])">
            <summary>
            Creates a new blank loot table
            </summary>
            <param name="includedLootTables">i think this litterally dose fuck all</param> 
            <param name="prerequisites">the prerequisites of the loot table... whatever the fuck that means</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.AddItemToPool(GenericLootTable,PickupObject,System.Single)">
            <summary>
            Adds an item to a loot table via PickupObject
            </summary>
            <param name="lootTable">The loot table you want to add to</param> 
            <param name="po">The PickupObject you're adding</param>
            <param name="weight">The Weight of the item you're adding (default is 1)</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.AddItemToPool(GenericLootTable,System.Int32[])">
            <summary>
            Adds an item to a loot table via PickupObject
            </summary>
            <param name="lootTable">The loot table you want to add to</param> 
            <param name="po">The PickupObject you're adding</param>
            <param name="weight">The Weight of the item you're adding (default is 1)</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.Misc.LootUtility.AddItemToPool(GenericLootTable,System.Int32,System.Single)">
            <summary>
            Adds an item to a loot table via PickupObjectId
            </summary>
            <param name="lootTable">The loot table you want to add to</param> 
            <param name="poID">The id of the PickupObject you're adding</param>
            <param name="weight">The Weight of the item you're adding (default is 1)</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.NPCAPI.NpcTools.AddNewItemToAtlas(dfAtlas,UnityEngine.Texture2D,System.String)">
            <summary>
            Builds and adds a new <see cref="T:dfAtlas.ItemInfo"/> to <paramref name="atlas"/> with the texture of <paramref name="tex"/> and the name of <paramref name="name"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to add the new <see cref="T:dfAtlas.ItemInfo"/> to.</param>
            <param name="tex">The texture of the new <see cref="T:dfAtlas.ItemInfo"/>.</param>
            <param name="name">The name of the new <see cref="T:dfAtlas.ItemInfo"/>. If <see langword="null"/>, it will default to <paramref name="tex"/>'s name.</param>
            <returns>The built <see cref="T:dfAtlas.ItemInfo"/>.</returns>
        </member>
        <member name="M:Alexandria.NPCAPI.NpcTools.GetPixelRegions(dfAtlas)">
            <summary>
            Gets the pixel regions of <paramref name="atlas"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to get the pixel regions from.</param>
            <returns>A list with all pixel regions in <paramref name="atlas"/></returns>
        </member>
        <member name="M:Alexandria.NPCAPI.NpcTools.Convert``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            Converts a list of the type <typeparamref name="T"/> to a list of the type <typeparamref name="T2"/> using <paramref name="convertor"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="self"/> list.</typeparam>
            <typeparam name="T2">The type to convert the <paramref name="self"/> list to.</typeparam>
            <param name="self">The original list.</param>
            <param name="convertor">A delegate that converts an element of type <typeparamref name="T"/> to an element of a type <typeparamref name="T2"/>.</param>
            <returns>The converted list of type <typeparamref name="T2"/></returns>
        </member>
        <member name="M:Alexandria.NPCAPI.NpcTools.FindFirstValidEmptySpace(dfAtlas,IntVector2)">
            <summary>
            Gets the first empty space in <paramref name="atlas"/> that has at least the size of <paramref name="pixelScale"/>.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to find the empty space in.</param>
            <param name="pixelScale">The required size of the empty space.</param>
            <returns>The rect of the empty space divided by the atlas texture's size.</returns>
        </member>
        <member name="M:Alexandria.NPCAPI.NpcTools.ResizeAtlas(dfAtlas,IntVector2)">
            <summary>
            Resizes <paramref name="atlas"/> and all of it's <see cref="T:dfAtlas.ItemInfo"/>s.
            </summary>
            <param name="atlas">The <see cref="T:dfAtlas"/> to resize/</param>
            <param name="newDimensions"><paramref name="atlas"/>'s new size.</param>
        </member>
        <member name="M:Alexandria.NPCAPI.NpcTools.ResizeBetter(UnityEngine.Texture2D,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes <paramref name="tex"/> without it losing it's pixel information.
            </summary>
            <param name="tex">The <see cref="T:UnityEngine.Texture2D"/> to resize.</param>
            <param name="width">The <paramref name="tex"/>'s new width.</param>
            <param name="height">The <paramref name="tex"/>'s new height.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.NPCAPI.NpcTools.ToVector2Int(IntVector2)">
            <summary>
            Converts <paramref name="vector"/> to a <see cref="T:UnityEngine.Vector2Int"/>.
            </summary>
            <param name="vector">The <see cref="T:IntVector2"/> to convert.</param>
            <returns><paramref name="vector"/> converted to <see cref="T:UnityEngine.Vector2Int"/>.</returns>
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.SetUpShop(System.String,System.String,System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String},System.Int32,GenericLootTable,Alexandria.NPCAPI.CustomShopItemController.ShopCurrencyType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,UnityEngine.Vector3,UnityEngine.Vector3,Alexandria.NPCAPI.ShopAPI.VoiceBoxes,UnityEngine.Vector3[],System.Single,System.Boolean,StatModifier[],System.Func{Alexandria.NPCAPI.CustomShopController,PlayerController,System.Int32,System.Boolean},System.Func{Alexandria.NPCAPI.CustomShopController,PlayerController,System.Int32,System.Int32},System.Func{Alexandria.NPCAPI.CustomShopController,Alexandria.NPCAPI.CustomShopItemController,PickupObject,System.Int32},System.Func{PlayerController,PickupObject,System.Int32,System.Boolean},System.Func{PlayerController,PickupObject,System.Int32,System.Boolean},System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{UnityEngine.Vector2},System.Boolean,System.String,System.Boolean,System.Single,DungeonPrerequisite[],System.Single,Alexandria.NPCAPI.CustomShopController.ShopItemPoolType,System.Boolean,System.Nullable{IntVector2},System.Nullable{IntVector2})">
             <summary>
             Creates a shop object along with an npc
             </summary>
             <param name="name">Name of the npc</param> 
             <param name="prefix">Mod prefix (for example Bot)</param> 
             
             <param name="idleSpritePaths">List of *FULL* sprite paths for the idle animation</param> 
             <param name="idleFps">Fps of the idle animation (base game tends to use around 6)</param> 
             
             <param name="talkSpritePaths">List of *FULL* sprite paths for the talk animation</param> 
             <param name="talkFps">Fps of the talk animation (base game tends to use around 8)</param> 
             
             <param name="lootTable">Shop loot table</param> 
             <param name="currency">What is used to buy items at the shop</param> 
             
             <param name="runBasedMultilineGenericStringKey">String key for normal convos</param> 
             <param name="runBasedMultilineStopperStringKey">String key for if you try talking to an npc to much</param> 
             <param name="purchaseItemStringKey">String key for when the player buys something</param> 
             <param name="purchaseItemFailedStringKey">String key for when the player tries but fails to buy something</param> 
             <param name="introStringKey">String key for when the player enters the room</param> 
             <param name="attackedStringKey">String key for when the player shoots at the npc</param> 
             <param name="costModifier">The multiplier for shop prices</param> 
             <param name="itemPositions">The offset for the item(s) sold by your npc, the amount of items sold is based off how many offsets you add here (if you just want the 3 normally items spots you can use ItsDaFuckinShopApi.defaultItemPositions)</param> 
             <param name="giveStatsOnPurchase">Whether the shop modifies stats after the player buys an item for example how cursula gives curse</param> 
             <param name="statsToGiveOnPurchase"> The stats given when the player buys an item (will be ingored if statsToGiveOnPurchase is false)</param> 
             
             <param name="CustomCanBuy">The method that gets called to check if the player can buy an item (useless if currency isnt set to CUSTOM)</param> 
             <param name="CustomRemoveCurrency">The method that gets called remove currency from the player (useless if currency isnt set to CUSTOM)</param> 
             <param name="CustomPrice">The method that gets called to get the price of an item (useless if currency isnt set to CUSTOM)</param> 
             
             <param name="currencyIconPath">Sprite path for your custom currency sprite</param> 
             <param name="currencyName">The name you want your custom currecy sprite to have (i should probably remove this...)</param> 
            
             <param name="hasCarpet">Whether the shop has a carpet or something else that they sit on</param> 
             <param name="carpetSpritePath">Sprite path for the carpet or whatever</param> 
                     
             <param name="hasMinimapIcon">Whether the shop has a minimap icon to show what room theyre in</param> 
             <param name="minimapIconSpritePath">Sprite path minimap icon leave blank to just use deafult smiley face</param> 
             
             <param name="addToMainNpcPool">Whether the shop should be added to the pool of npcs that show up in the main shop a long side bello</param> 
             <param name="percentChanceForMainPool">How likely it is for the shop to show up in the main pool base game shops use 0.1</param> 
             
             <param name="prerequisites">These do unlocks and shit</param> 
             <param name="fortunesFavorRadius">The radius of the fortunes favor effect.</param> 
             <param name="poolType">Determines how your shop pool will pick items. DEFAULT is how basegame does it, DUPES allows your shop to sell deplicates and DUPES_AND_NOEXCLUSION allows your shop to sell duplicate items and EXCLUDED tier items.</param> 
             <param name="RainbowModeImmunity">Enables/Disables immunity to the dreaded capitalism killer, Rainbow mode.</param> 
            <returns></returns>
            
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.AddAdditionalAnimationsToShop(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Single,System.Collections.Generic.List{System.String},System.Single,System.Collections.Generic.List{System.String},System.Single)">
            <summary>
            Adds additional animations to certain events to your NPC. To Note, the aanimation names that are used here for certain animations (If the NPC will have one) are called: 
            
            On Purchase Animation Name: purchase
            
            On Denied Purchase Animation Name: denied
            
            On Stolen From Animation Name: stolen
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="purchaseSpritePaths">Your purchase animation sprite paths.</param> 
            <param name="purchaseAnimFPS">Your purchase animation FPS.</param> 
            <param name="denyPurchaseSpritePaths">Your purchase denied animation sprite paths.</param> 
            <param name="denyPurchaseAnimFPS">Your purchase denied animation FPS.</param> 
            <param name="stealSpritePaths">Your on stolen from animation sprite paths.</param> 
            <param name="stealAnimFPS">Your on stolen from animation FPS.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.ChangeVoiceBox(UnityEngine.GameObject,Alexandria.NPCAPI.ShopAPI.VoiceBoxes)">
            <summary>
            Changes the voice that your NPC makes
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="voicebox">The given VoiceBox to change to.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.AddParentedAnimationToShop(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Single,System.String)">
            <summary>
            Add a new DIRECTIONAL animation to your NPC. You can then play it when you need to using CustomShopController.TryPlayAnimation()
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="yourPaths">The sprite paths for your animation.</param> 
            <param name="YourAnimFPS">Your animations FPS.</param> 
            <param name="AnimationName">Your DIRECTIONAL animations name, along with the animations name.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.AddUnparentedAnimationToShop(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Single,System.String)">
            <summary>
            Add a new animation to your NPC. This animation is NOT a directional one, but can still be played via switching a pre-existing directional animations AnimNames with this animations name or other means.
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="yourPaths">The sprite paths for your animation.</param> 
            <param name="YourAnimFPS">Your animations FPS.</param> 
            <param name="AnimationName">Your NON DIRECTIONAL animations name.</param> 
        </member>
        <member name="M:Alexandria.NPCAPI.ShopAPI.ModifyPreExistingDirectionalAnimation(UnityEngine.GameObject,System.String,System.String)">
            <summary>
            Modifies a pre-existing directional animation in your NPC to use a different NON-Directional animation that it ALSO has.
            </summary>
            <param name="self">The GameObject SetUpShop() returns.</param> 
            <param name="DirectionalAnimationPrefixToModify">The Prefix of your DIRECTIONAL animation.</param> 
            <param name="YourNonDirectionalAnimationName">The NAME of your NON DIRECTIONAL animation.</param> 
        </member>
        <member name="T:Alexandria.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alexandria.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alexandria.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Alexandria.TranslationAPI.CustomStringDBTable">
            <summary>
            Handles custom strings for UI and synergy tables.
            </summary>
        </member>
        <member name="P:Alexandria.TranslationAPI.CustomStringDBTable.Table">
            <summary>
            The string table.
            </summary>
        </member>
        <member name="P:Alexandria.TranslationAPI.CustomStringDBTable.Item(System.String)">
            <summary>
            Gets a string with the key of <paramref name="key"/> from the table.
            </summary>
            <param name="key">The string's key</param>
            <returns>The string with the key of <paramref name="key"/>.</returns>
        </member>
        <member name="M:Alexandria.TranslationAPI.CustomStringDBTable.SetValue(System.String,StringTableManager.StringCollection)">
            <summary>
            Sets a string with the key of <paramref name="key"/> in the table.
            </summary>
            <param name="key">The string's key.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.CustomStringDBTable.#ctor(System.Func{System.Collections.Generic.Dictionary{System.String,StringTableManager.StringCollection}})">
            <summary>
            Builds a new <see cref="T:Alexandria.TranslationAPI.CustomStringDBTable"/> with the table get function of <paramref name="getTable"/>.
            </summary>
            <param name="getTable">The function that gets the table for this <see cref="T:Alexandria.TranslationAPI.CustomStringDBTable"/></param>
        </member>
        <member name="M:Alexandria.TranslationAPI.CustomStringDBTable.ContainsKey(System.String)">
            <summary>
            Returns <see langword="true"/> if the table contains <paramref name="key"/>.
            </summary>
            <param name="key">The key to check</param>
            <returns><see langword="true"/> if the table contains <paramref name="key"/>.</returns>
        </member>
        <member name="M:Alexandria.TranslationAPI.CustomStringDBTable.Set(System.String,System.String)">
            <summary>
            Sets a string with the key of <paramref name="key"/> in the table.
            </summary>
            <param name="key">The string's key.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.CustomStringDBTable.Get(System.String)">
            <summary>
            Gets a string with the key of <paramref name="key"/>.
            </summary>
            <param name="key">The string's key.</param>
            <returns>The string with the key of <paramref name="key"/>.</returns>
        </member>
        <member name="M:Alexandria.TranslationAPI.CustomStringDBTable.LanguageChanged">
            <summary>
            Applies all the string changes to the tables of the new language.
            </summary>
        </member>
        <member name="T:Alexandria.TranslationAPI.StringTableType">
            <summary>
            Type of string tables.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.StringTableType.Core">
            <summary>
            Core strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.StringTableType.Items">
            <summary>
            Item strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.StringTableType.Enemies">
            <summary>
            Enemy strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.StringTableType.UI">
            <summary>
            UI strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.StringTableType.Intro">
            <summary>
            Intro strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.StringTableType.Synergy">
            <summary>
            Synergy strings.
            </summary>
        </member>
        <member name="T:Alexandria.TranslationAPI.Translation">
            <summary>
            Handles translations for various string tables of various languages.
            </summary>
        </member>
        <member name="P:Alexandria.TranslationAPI.Translation.Table">
            <summary>
            The current language's string table.
            </summary>
        </member>
        <member name="M:Alexandria.TranslationAPI.Translation.UpdateLanguage(System.Nullable{StringTableManager.GungeonSupportedLanguages})">
            <summary>
            If the current language or <paramref name="overrideLang"/> are equal to <see cref="F:Alexandria.TranslationAPI.Translation.language"/> of this translation, apply the translation changes.
            </summary>
            <param name="overrideLang">If not <see langword="null"/>, will be used instead of the current language to check if the translations should be applied.</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.TranslationAPI.Translation.AddStringTranslation(System.String,System.String)">
            <summary>
            Adds a new string to this translation and if the current language is equal to <see cref="F:Alexandria.TranslationAPI.Translation.language"/> of this translation, applies the change.
            </summary>
            <param name="key">The key to string.</param>
            <param name="value">The translated string.</param>
        </member>
        <member name="F:Alexandria.TranslationAPI.Translation.type">
            <summary>
            Type of table this translation applies to.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.Translation.language">
            <summary>
            The language this translation applies to.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.Translation.strings">
            <summary>
            Translated strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.Translation.getTable">
            <summary>
            Method that gets the current language's string table.
            </summary>
        </member>
        <member name="T:Alexandria.TranslationAPI.TranslationManager">
            <summary>
            The core class of TranslationAPI that can add new translations.
            </summary>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.Init">
            <summary>
            Inits TranslationAPI. You're not required to call this method, it should be called automatically when you try to add a translation.
            </summary>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.Unload">
            <summary>
            Unloads TranslationAPI and removes all added translations.
            </summary>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateItemName(PickupObject,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="item"/>'s name.
            </summary>
            <param name="item">The <see cref="T:PickupObject"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateItemShortDescription(PickupObject,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="item"/>'s short description.
            </summary>
            <param name="item">The <see cref="T:PickupObject"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateItemLongDescription(PickupObject,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="item"/>'s long description.
            </summary>
            <param name="item">The <see cref="T:PickupObject"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateEnemyName(AIActor,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="enemy"/>'s name.
            </summary>
            <param name="enemy">The <see cref="T:AIActor"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateEnemyShortDescription(AIActor,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="enemy"/>'s short description.
            </summary>
            <param name="enemy">The <see cref="T:AIActor"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateEnemyLongDescription(AIActor,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="enemy"/>'s long description.
            </summary>
            <param name="enemy">The <see cref="T:AIActor"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateName(EncounterTrackable,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="track"/>'s name.
            </summary>
            <param name="track">The <see cref="T:EncounterTrackable"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateShortDescription(EncounterTrackable,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="track"/>'s short description.
            </summary>
            <param name="track">The <see cref="T:EncounterTrackable"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.TranslateLongDescription(EncounterTrackable,StringTableManager.GungeonSupportedLanguages,System.String)">
            <summary>
            Adds a new translation for <paramref name="track"/>'s long description.
            </summary>
            <param name="track">The <see cref="T:EncounterTrackable"/> to add the translation to.</param>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="translation">The translated text.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.AddTranslation(StringTableManager.GungeonSupportedLanguages,System.String,System.String,Alexandria.TranslationAPI.StringTableType)">
            <summary>
            Adds a new translation for an individual string.
            </summary>
            <param name="language">The language to which the translation will be applied.</param>
            <param name="key">The string's key</param>
            <param name="value">The string</param>
            <param name="tableType">Type of the table in which <paramref name="value"/> is in.</param>
        </member>
        <member name="M:Alexandria.TranslationAPI.TranslationManager.ForceUpdateTranslation">
            <summary>
            Force updates the translations.
            </summary>
        </member>
        <member name="P:Alexandria.TranslationAPI.TranslationManager.SynergyTable">
            <summary>
            The table with all the synergy strings.
            </summary>
        </member>
        <member name="P:Alexandria.TranslationAPI.TranslationManager.UITable">
            <summary>
            The table with all the UI strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.TranslationManager.translations">
            <summary>
            The list of all table translations.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.TranslationManager.UIStrings">
            <summary>
            The <see cref="T:Alexandria.TranslationAPI.CustomStringDBTable"/> for UI strings.
            </summary>
        </member>
        <member name="F:Alexandria.TranslationAPI.TranslationManager.SynergyStrings">
            <summary>
            The <see cref="T:Alexandria.TranslationAPI.CustomStringDBTable"/> for synergy strings.
            </summary>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.PosStateBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitContextBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitPosBits" -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:LZ4.LZ4Codec">
            <summary>
                LZ4 codec selecting best implementation depending on platform.
            </summary>
        </member>
        <member name="F:LZ4.LZ4Codec.Encoder">
            <summary>Encoding service.</summary>
        </member>
        <member name="F:LZ4.LZ4Codec.EncoderHC">
            <summary>Encoding service for HC algorithm.</summary>
        </member>
        <member name="F:LZ4.LZ4Codec.Decoder">
            <summary>Decoding service.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.#cctor">
            <summary>Initializes the <see cref="T:LZ4.LZ4Codec" /> class.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.AutoTest(LZ4.ILZ4Service)">
            <summary>Performs the quick auto-test on given compression service.</summary>
            <param name="service">The service.</param>
            <returns>A service or <c>null</c> if it failed.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Try(System.Action)">
            <summary>Tries to execute specified action. Ignores exception if it failed.</summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:LZ4.LZ4Codec.Try``1(System.Func{``0},``0)">
            <summary>Tries to execute specified action. Ignores exception if it failed.</summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="method">The method.</param>
            <param name="defaultValue">The default value, returned when action fails.</param>
            <returns>Result of given method, or default value.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.TryService``1">
            <summary>Tries to create a specified <seealso cref="T:LZ4.ILZ4Service" /> and tests it.</summary>
            <typeparam name="T">Concrete <seealso cref="T:LZ4.ILZ4Service" /> type.</typeparam>
            <returns>A service if succeeded or <c>null</c> if it failed.</returns>
        </member>
        <member name="P:LZ4.LZ4Codec.CodecName">
            <summary>Gets the name of selected codec(s).</summary>
            <value>The name of the codec.</value>
        </member>
        <member name="M:LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Get maximum output length.</summary>
            <param name="inputLength">Input length.</param>
            <returns>Output length.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Decode(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Poke4(System.Byte[],System.Int32,System.UInt32)">
            <summary>Sets uint32 value in byte buffer.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LZ4.LZ4Codec.Peek4(System.Byte[],System.Int32)">
            <summary>Gets uint32 from byte buffer.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.Wrap(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Compresses and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="highCompression">if set to <c>true</c> uses high compression.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.WrapHC(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses (with high compression algorithm) and wraps given input byte buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
            <exception cref="T:System.ArgumentException">inputBuffer size of inputLength is invalid</exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Unwrap(System.Byte[],System.Int32)">
            <summary>Unwraps the specified compressed buffer.</summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <returns>Uncompressed buffer.</returns>
            <exception cref="T:System.ArgumentException">
                inputBuffer size is invalid or inputBuffer size is invalid or has been corrupted
            </exception>
        </member>
        <member name="M:LZ4.LZ4Codec.Has2015Runtime">
            <summary>Determines whether VS2015 runtime is installed. 
            Note, on Mono the Registry class is not available at all, 
            so access to it have to be isolated.</summary>
            <returns><c>true</c> it VS2010 runtime is installed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4mm">
            <summary>Initializes codecs from LZ4mm.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4cc">
            <summary>Initializes codecs from LZ4cc.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4n">
            <summary>Initializes codecs from LZ4n.</summary>
        </member>
        <member name="M:LZ4.LZ4Codec.InitializeLZ4s">
            <summary>Initializes codecs from LZ4s.</summary>
        </member>
        <member name="T:LZ4ps.LZ4Codec">
            <summary>Safe LZ4 codec.</summary>
        </member>
        <member name="F:LZ4ps.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:LZ4ps.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="F:LZ4ps.LZ4Codec.BLOCK_COPY_LIMIT">
            <summary>Buffer length when Buffer.BlockCopy becomes faster than straight loop.
            Please note that safe implementation REQUIRES it to be greater (not even equal) than 8.</summary>
        </member>
        <member name="M:LZ4ps.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:LZ4ps.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
    </members>
</doc>
